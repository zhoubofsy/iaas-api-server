// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: flavor.proto

// 指定文件生成出来的package

package flavor

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Flavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorId    string `protobuf:"bytes,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	FlavorName  string `protobuf:"bytes,2,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`
	FlavorVcpus string `protobuf:"bytes,3,opt,name=flavor_vcpus,json=flavorVcpus,proto3" json:"flavor_vcpus,omitempty"`
	FlavorRam   string `protobuf:"bytes,4,opt,name=flavor_ram,json=flavorRam,proto3" json:"flavor_ram,omitempty"`
	FlavorDisk  string `protobuf:"bytes,5,opt,name=flavor_disk,json=flavorDisk,proto3" json:"flavor_disk,omitempty"`
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{0}
}

func (x *Flavor) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetFlavorVcpus() string {
	if x != nil {
		return x.FlavorVcpus
	}
	return ""
}

func (x *Flavor) GetFlavorRam() string {
	if x != nil {
		return x.FlavorRam
	}
	return ""
}

func (x *Flavor) GetFlavorDisk() string {
	if x != nil {
		return x.FlavorDisk
	}
	return ""
}

type ListFlavorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	PageNumber     int32  `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize       int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListFlavorsReq) Reset() {
	*x = ListFlavorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlavorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlavorsReq) ProtoMessage() {}

func (x *ListFlavorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlavorsReq.ProtoReflect.Descriptor instead.
func (*ListFlavorsReq) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{1}
}

func (x *ListFlavorsReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *ListFlavorsReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListFlavorsReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *ListFlavorsReq) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListFlavorsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFlavorsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Flavors []*Flavor `protobuf:"bytes,3,rep,name=flavors,proto3" json:"flavors,omitempty"`
}

func (x *ListFlavorsRes) Reset() {
	*x = ListFlavorsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlavorsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlavorsRes) ProtoMessage() {}

func (x *ListFlavorsRes) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlavorsRes.ProtoReflect.Descriptor instead.
func (*ListFlavorsRes) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{2}
}

func (x *ListFlavorsRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListFlavorsRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListFlavorsRes) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type GetFlavorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FlavorId       string `protobuf:"bytes,4,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
}

func (x *GetFlavorReq) Reset() {
	*x = GetFlavorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlavorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlavorReq) ProtoMessage() {}

func (x *GetFlavorReq) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlavorReq.ProtoReflect.Descriptor instead.
func (*GetFlavorReq) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{3}
}

func (x *GetFlavorReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *GetFlavorReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetFlavorReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *GetFlavorReq) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

type GetFlavorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg    string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Flavor *Flavor `protobuf:"bytes,3,opt,name=flavor,proto3" json:"flavor,omitempty"`
}

func (x *GetFlavorRes) Reset() {
	*x = GetFlavorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlavorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlavorRes) ProtoMessage() {}

func (x *GetFlavorRes) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlavorRes.ProtoReflect.Descriptor instead.
func (*GetFlavorRes) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{4}
}

func (x *GetFlavorRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetFlavorRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFlavorRes) GetFlavor() *Flavor {
	if x != nil {
		return x.Flavor
	}
	return nil
}

var File_flavor_proto protoreflect.FileDescriptor

var file_flavor_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x63, 0x70,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x6b, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x60, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x32, 0x87, 0x01,
	0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x66, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flavor_proto_rawDescOnce sync.Once
	file_flavor_proto_rawDescData = file_flavor_proto_rawDesc
)

func file_flavor_proto_rawDescGZIP() []byte {
	file_flavor_proto_rawDescOnce.Do(func() {
		file_flavor_proto_rawDescData = protoimpl.X.CompressGZIP(file_flavor_proto_rawDescData)
	})
	return file_flavor_proto_rawDescData
}

var file_flavor_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_flavor_proto_goTypes = []interface{}{
	(*Flavor)(nil),         // 0: flavor.Flavor
	(*ListFlavorsReq)(nil), // 1: flavor.ListFlavorsReq
	(*ListFlavorsRes)(nil), // 2: flavor.ListFlavorsRes
	(*GetFlavorReq)(nil),   // 3: flavor.GetFlavorReq
	(*GetFlavorRes)(nil),   // 4: flavor.GetFlavorRes
}
var file_flavor_proto_depIdxs = []int32{
	0, // 0: flavor.ListFlavorsRes.flavors:type_name -> flavor.Flavor
	0, // 1: flavor.GetFlavorRes.flavor:type_name -> flavor.Flavor
	1, // 2: flavor.FlavorService.ListFlavors:input_type -> flavor.ListFlavorsReq
	3, // 3: flavor.FlavorService.GetFlavor:input_type -> flavor.GetFlavorReq
	2, // 4: flavor.FlavorService.ListFlavors:output_type -> flavor.ListFlavorsRes
	4, // 5: flavor.FlavorService.GetFlavor:output_type -> flavor.GetFlavorRes
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_flavor_proto_init() }
func file_flavor_proto_init() {
	if File_flavor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flavor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlavorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlavorsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlavorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlavorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flavor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flavor_proto_goTypes,
		DependencyIndexes: file_flavor_proto_depIdxs,
		MessageInfos:      file_flavor_proto_msgTypes,
	}.Build()
	File_flavor_proto = out.File
	file_flavor_proto_rawDesc = nil
	file_flavor_proto_goTypes = nil
	file_flavor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlavorServiceClient is the client API for FlavorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlavorServiceClient interface {
	//获取规格列表
	ListFlavors(ctx context.Context, in *ListFlavorsReq, opts ...grpc.CallOption) (*ListFlavorsRes, error)
	//获取规格信息
	GetFlavor(ctx context.Context, in *GetFlavorReq, opts ...grpc.CallOption) (*GetFlavorRes, error)
}

type flavorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlavorServiceClient(cc grpc.ClientConnInterface) FlavorServiceClient {
	return &flavorServiceClient{cc}
}

func (c *flavorServiceClient) ListFlavors(ctx context.Context, in *ListFlavorsReq, opts ...grpc.CallOption) (*ListFlavorsRes, error) {
	out := new(ListFlavorsRes)
	err := c.cc.Invoke(ctx, "/flavor.FlavorService/ListFlavors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flavorServiceClient) GetFlavor(ctx context.Context, in *GetFlavorReq, opts ...grpc.CallOption) (*GetFlavorRes, error) {
	out := new(GetFlavorRes)
	err := c.cc.Invoke(ctx, "/flavor.FlavorService/GetFlavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlavorServiceServer is the server API for FlavorService service.
type FlavorServiceServer interface {
	//获取规格列表
	ListFlavors(context.Context, *ListFlavorsReq) (*ListFlavorsRes, error)
	//获取规格信息
	GetFlavor(context.Context, *GetFlavorReq) (*GetFlavorRes, error)
}

// UnimplementedFlavorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlavorServiceServer struct {
}

func (*UnimplementedFlavorServiceServer) ListFlavors(context.Context, *ListFlavorsReq) (*ListFlavorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlavors not implemented")
}
func (*UnimplementedFlavorServiceServer) GetFlavor(context.Context, *GetFlavorReq) (*GetFlavorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlavor not implemented")
}

func RegisterFlavorServiceServer(s *grpc.Server, srv FlavorServiceServer) {
	s.RegisterService(&_FlavorService_serviceDesc, srv)
}

func _FlavorService_ListFlavors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlavorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorServiceServer).ListFlavors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flavor.FlavorService/ListFlavors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorServiceServer).ListFlavors(ctx, req.(*ListFlavorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlavorService_GetFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorServiceServer).GetFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flavor.FlavorService/GetFlavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorServiceServer).GetFlavor(ctx, req.(*GetFlavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlavorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flavor.FlavorService",
	HandlerType: (*FlavorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFlavors",
			Handler:    _FlavorService_ListFlavors_Handler,
		},
		{
			MethodName: "GetFlavor",
			Handler:    _FlavorService_GetFlavor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flavor.proto",
}

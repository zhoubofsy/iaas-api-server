// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: peerlink.proto

// 指定文件生成出来的package

package peerlink

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PeerLinkRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg             string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	LinkConfOnPeerA *PeerLinkRes_LinkConf `protobuf:"bytes,3,opt,name=link_conf_on_peer_a,json=linkConfOnPeerA,proto3" json:"link_conf_on_peer_a,omitempty"`
	LinkConfOnPeerB *PeerLinkRes_LinkConf `protobuf:"bytes,4,opt,name=link_conf_on_peer_b,json=linkConfOnPeerB,proto3" json:"link_conf_on_peer_b,omitempty"`
}

func (x *PeerLinkRes) Reset() {
	*x = PeerLinkRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peerlink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerLinkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerLinkRes) ProtoMessage() {}

func (x *PeerLinkRes) ProtoReflect() protoreflect.Message {
	mi := &file_peerlink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerLinkRes.ProtoReflect.Descriptor instead.
func (*PeerLinkRes) Descriptor() ([]byte, []int) {
	return file_peerlink_proto_rawDescGZIP(), []int{0}
}

func (x *PeerLinkRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PeerLinkRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PeerLinkRes) GetLinkConfOnPeerA() *PeerLinkRes_LinkConf {
	if x != nil {
		return x.LinkConfOnPeerA
	}
	return nil
}

func (x *PeerLinkRes) GetLinkConfOnPeerB() *PeerLinkRes_LinkConf {
	if x != nil {
		return x.LinkConfOnPeerB
	}
	return nil
}

type PeerLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	PeerASubnetid  string `protobuf:"bytes,4,opt,name=peer_a_subnetid,json=peerASubnetid,proto3" json:"peer_a_subnetid,omitempty"`
	PeerARouterid  string `protobuf:"bytes,5,opt,name=peer_a_routerid,json=peerARouterid,proto3" json:"peer_a_routerid,omitempty"`
	PeerBSubnetid  string `protobuf:"bytes,6,opt,name=peer_b_subnetid,json=peerBSubnetid,proto3" json:"peer_b_subnetid,omitempty"`
	PeerBRouterid  string `protobuf:"bytes,7,opt,name=peer_b_routerid,json=peerBRouterid,proto3" json:"peer_b_routerid,omitempty"`
}

func (x *PeerLinkReq) Reset() {
	*x = PeerLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peerlink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerLinkReq) ProtoMessage() {}

func (x *PeerLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_peerlink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerLinkReq.ProtoReflect.Descriptor instead.
func (*PeerLinkReq) Descriptor() ([]byte, []int) {
	return file_peerlink_proto_rawDescGZIP(), []int{1}
}

func (x *PeerLinkReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *PeerLinkReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PeerLinkReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *PeerLinkReq) GetPeerASubnetid() string {
	if x != nil {
		return x.PeerASubnetid
	}
	return ""
}

func (x *PeerLinkReq) GetPeerARouterid() string {
	if x != nil {
		return x.PeerARouterid
	}
	return ""
}

func (x *PeerLinkReq) GetPeerBSubnetid() string {
	if x != nil {
		return x.PeerBSubnetid
	}
	return ""
}

func (x *PeerLinkReq) GetPeerBRouterid() string {
	if x != nil {
		return x.PeerBRouterid
	}
	return ""
}

type DeletePeerLinkRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PeerASubnetid string `protobuf:"bytes,3,opt,name=peer_a_subnetid,json=peerASubnetid,proto3" json:"peer_a_subnetid,omitempty"`
	PeerARouterid string `protobuf:"bytes,4,opt,name=peer_a_routerid,json=peerARouterid,proto3" json:"peer_a_routerid,omitempty"`
	PeerBSubnetid string `protobuf:"bytes,5,opt,name=peer_b_subnetid,json=peerBSubnetid,proto3" json:"peer_b_subnetid,omitempty"`
	PeerBRouterid string `protobuf:"bytes,6,opt,name=peer_b_routerid,json=peerBRouterid,proto3" json:"peer_b_routerid,omitempty"`
	DeletedTime   string `protobuf:"bytes,7,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`
}

func (x *DeletePeerLinkRes) Reset() {
	*x = DeletePeerLinkRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peerlink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePeerLinkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePeerLinkRes) ProtoMessage() {}

func (x *DeletePeerLinkRes) ProtoReflect() protoreflect.Message {
	mi := &file_peerlink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePeerLinkRes.ProtoReflect.Descriptor instead.
func (*DeletePeerLinkRes) Descriptor() ([]byte, []int) {
	return file_peerlink_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePeerLinkRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeletePeerLinkRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeletePeerLinkRes) GetPeerASubnetid() string {
	if x != nil {
		return x.PeerASubnetid
	}
	return ""
}

func (x *DeletePeerLinkRes) GetPeerARouterid() string {
	if x != nil {
		return x.PeerARouterid
	}
	return ""
}

func (x *DeletePeerLinkRes) GetPeerBSubnetid() string {
	if x != nil {
		return x.PeerBSubnetid
	}
	return ""
}

func (x *DeletePeerLinkRes) GetPeerBRouterid() string {
	if x != nil {
		return x.PeerBRouterid
	}
	return ""
}

func (x *DeletePeerLinkRes) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

type PeerLinkRes_LinkConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId      string                      `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	IntfIp      string                      `protobuf:"bytes,2,opt,name=intf_ip,json=intfIp,proto3" json:"intf_ip,omitempty"`
	RouteToPeer *PeerLinkRes_LinkConf_Route `protobuf:"bytes,3,opt,name=route_to_peer,json=routeToPeer,proto3" json:"route_to_peer,omitempty"`
	CreatedTime string                      `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *PeerLinkRes_LinkConf) Reset() {
	*x = PeerLinkRes_LinkConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peerlink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerLinkRes_LinkConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerLinkRes_LinkConf) ProtoMessage() {}

func (x *PeerLinkRes_LinkConf) ProtoReflect() protoreflect.Message {
	mi := &file_peerlink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerLinkRes_LinkConf.ProtoReflect.Descriptor instead.
func (*PeerLinkRes_LinkConf) Descriptor() ([]byte, []int) {
	return file_peerlink_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PeerLinkRes_LinkConf) GetIntfId() string {
	if x != nil {
		return x.IntfId
	}
	return ""
}

func (x *PeerLinkRes_LinkConf) GetIntfIp() string {
	if x != nil {
		return x.IntfIp
	}
	return ""
}

func (x *PeerLinkRes_LinkConf) GetRouteToPeer() *PeerLinkRes_LinkConf_Route {
	if x != nil {
		return x.RouteToPeer
	}
	return nil
}

func (x *PeerLinkRes_LinkConf) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

type PeerLinkRes_LinkConf_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Nexthop     string `protobuf:"bytes,2,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
}

func (x *PeerLinkRes_LinkConf_Route) Reset() {
	*x = PeerLinkRes_LinkConf_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peerlink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerLinkRes_LinkConf_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerLinkRes_LinkConf_Route) ProtoMessage() {}

func (x *PeerLinkRes_LinkConf_Route) ProtoReflect() protoreflect.Message {
	mi := &file_peerlink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerLinkRes_LinkConf_Route.ProtoReflect.Descriptor instead.
func (*PeerLinkRes_LinkConf_Route) Descriptor() ([]byte, []int) {
	return file_peerlink_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PeerLinkRes_LinkConf_Route) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *PeerLinkRes_LinkConf_Route) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

var File_peerlink_proto protoreflect.FileDescriptor

var file_peerlink_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xc0, 0x03, 0x0a, 0x0b, 0x50,
	0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x4f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x12, 0x4c,
	0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x4f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x42, 0x1a, 0xee, 0x01, 0x0a,
	0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0x8b, 0x02,
	0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x41, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x42, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x62, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x42, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x41, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x41, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x42, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x42, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xd4, 0x01, 0x0a, 0x0f, 0x50,
	0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x15, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peerlink_proto_rawDescOnce sync.Once
	file_peerlink_proto_rawDescData = file_peerlink_proto_rawDesc
)

func file_peerlink_proto_rawDescGZIP() []byte {
	file_peerlink_proto_rawDescOnce.Do(func() {
		file_peerlink_proto_rawDescData = protoimpl.X.CompressGZIP(file_peerlink_proto_rawDescData)
	})
	return file_peerlink_proto_rawDescData
}

var file_peerlink_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_peerlink_proto_goTypes = []interface{}{
	(*PeerLinkRes)(nil),                // 0: peerlink.PeerLinkRes
	(*PeerLinkReq)(nil),                // 1: peerlink.PeerLinkReq
	(*DeletePeerLinkRes)(nil),          // 2: peerlink.DeletePeerLinkRes
	(*PeerLinkRes_LinkConf)(nil),       // 3: peerlink.PeerLinkRes.LinkConf
	(*PeerLinkRes_LinkConf_Route)(nil), // 4: peerlink.PeerLinkRes.LinkConf.Route
}
var file_peerlink_proto_depIdxs = []int32{
	3, // 0: peerlink.PeerLinkRes.link_conf_on_peer_a:type_name -> peerlink.PeerLinkRes.LinkConf
	3, // 1: peerlink.PeerLinkRes.link_conf_on_peer_b:type_name -> peerlink.PeerLinkRes.LinkConf
	4, // 2: peerlink.PeerLinkRes.LinkConf.route_to_peer:type_name -> peerlink.PeerLinkRes.LinkConf.Route
	1, // 3: peerlink.PeerLinkService.CreatePeerLink:input_type -> peerlink.PeerLinkReq
	1, // 4: peerlink.PeerLinkService.GetPeerLink:input_type -> peerlink.PeerLinkReq
	1, // 5: peerlink.PeerLinkService.DeletePeerLink:input_type -> peerlink.PeerLinkReq
	0, // 6: peerlink.PeerLinkService.CreatePeerLink:output_type -> peerlink.PeerLinkRes
	0, // 7: peerlink.PeerLinkService.GetPeerLink:output_type -> peerlink.PeerLinkRes
	2, // 8: peerlink.PeerLinkService.DeletePeerLink:output_type -> peerlink.DeletePeerLinkRes
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_peerlink_proto_init() }
func file_peerlink_proto_init() {
	if File_peerlink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peerlink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerLinkRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peerlink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peerlink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePeerLinkRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peerlink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerLinkRes_LinkConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peerlink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerLinkRes_LinkConf_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peerlink_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peerlink_proto_goTypes,
		DependencyIndexes: file_peerlink_proto_depIdxs,
		MessageInfos:      file_peerlink_proto_msgTypes,
	}.Build()
	File_peerlink_proto = out.File
	file_peerlink_proto_rawDesc = nil
	file_peerlink_proto_goTypes = nil
	file_peerlink_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PeerLinkServiceClient is the client API for PeerLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerLinkServiceClient interface {
	//创建对等连接
	CreatePeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*PeerLinkRes, error)
	//获取对等连接信息
	GetPeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*PeerLinkRes, error)
	//删除对等连接
	DeletePeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*DeletePeerLinkRes, error)
}

type peerLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerLinkServiceClient(cc grpc.ClientConnInterface) PeerLinkServiceClient {
	return &peerLinkServiceClient{cc}
}

func (c *peerLinkServiceClient) CreatePeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*PeerLinkRes, error) {
	out := new(PeerLinkRes)
	err := c.cc.Invoke(ctx, "/peerlink.PeerLinkService/CreatePeerLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerLinkServiceClient) GetPeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*PeerLinkRes, error) {
	out := new(PeerLinkRes)
	err := c.cc.Invoke(ctx, "/peerlink.PeerLinkService/GetPeerLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerLinkServiceClient) DeletePeerLink(ctx context.Context, in *PeerLinkReq, opts ...grpc.CallOption) (*DeletePeerLinkRes, error) {
	out := new(DeletePeerLinkRes)
	err := c.cc.Invoke(ctx, "/peerlink.PeerLinkService/DeletePeerLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerLinkServiceServer is the server API for PeerLinkService service.
type PeerLinkServiceServer interface {
	//创建对等连接
	CreatePeerLink(context.Context, *PeerLinkReq) (*PeerLinkRes, error)
	//获取对等连接信息
	GetPeerLink(context.Context, *PeerLinkReq) (*PeerLinkRes, error)
	//删除对等连接
	DeletePeerLink(context.Context, *PeerLinkReq) (*DeletePeerLinkRes, error)
}

// UnimplementedPeerLinkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPeerLinkServiceServer struct {
}

func (*UnimplementedPeerLinkServiceServer) CreatePeerLink(context.Context, *PeerLinkReq) (*PeerLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeerLink not implemented")
}
func (*UnimplementedPeerLinkServiceServer) GetPeerLink(context.Context, *PeerLinkReq) (*PeerLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerLink not implemented")
}
func (*UnimplementedPeerLinkServiceServer) DeletePeerLink(context.Context, *PeerLinkReq) (*DeletePeerLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePeerLink not implemented")
}

func RegisterPeerLinkServiceServer(s *grpc.Server, srv PeerLinkServiceServer) {
	s.RegisterService(&_PeerLinkService_serviceDesc, srv)
}

func _PeerLinkService_CreatePeerLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerLinkServiceServer).CreatePeerLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peerlink.PeerLinkService/CreatePeerLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerLinkServiceServer).CreatePeerLink(ctx, req.(*PeerLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerLinkService_GetPeerLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerLinkServiceServer).GetPeerLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peerlink.PeerLinkService/GetPeerLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerLinkServiceServer).GetPeerLink(ctx, req.(*PeerLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerLinkService_DeletePeerLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerLinkServiceServer).DeletePeerLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peerlink.PeerLinkService/DeletePeerLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerLinkServiceServer).DeletePeerLink(ctx, req.(*PeerLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerLinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peerlink.PeerLinkService",
	HandlerType: (*PeerLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePeerLink",
			Handler:    _PeerLinkService_CreatePeerLink_Handler,
		},
		{
			MethodName: "GetPeerLink",
			Handler:    _PeerLinkService_GetPeerLink_Handler,
		},
		{
			MethodName: "DeletePeerLink",
			Handler:    _PeerLinkService_DeletePeerLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peerlink.proto",
}

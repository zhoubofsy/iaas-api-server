// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: security_group.proto

// 指定文件生成出来的package

package securitygroup

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SecurityGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SecurityGroup *SecurityGroupRes_SecurityGroup `protobuf:"bytes,3,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
}

func (x *SecurityGroupRes) Reset() {
	*x = SecurityGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRes) ProtoMessage() {}

func (x *SecurityGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRes.ProtoReflect.Descriptor instead.
func (*SecurityGroupRes) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{0}
}

func (x *SecurityGroupRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SecurityGroupRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SecurityGroupRes) GetSecurityGroup() *SecurityGroupRes_SecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type SecurityGroupRuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleDesc       string `protobuf:"bytes,1,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"`
	Direction      string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Protocol       string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	PortRangeMin   int32  `protobuf:"varint,4,opt,name=port_range_min,json=portRangeMin,proto3" json:"port_range_min,omitempty"`
	PortRangeMax   int32  `protobuf:"varint,5,opt,name=port_range_max,json=portRangeMax,proto3" json:"port_range_max,omitempty"`
	RemoteIpPrefix string `protobuf:"bytes,6,opt,name=remote_ip_prefix,json=remoteIpPrefix,proto3" json:"remote_ip_prefix,omitempty"`
}

func (x *SecurityGroupRuleSet) Reset() {
	*x = SecurityGroupRuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRuleSet) ProtoMessage() {}

func (x *SecurityGroupRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRuleSet.ProtoReflect.Descriptor instead.
func (*SecurityGroupRuleSet) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityGroupRuleSet) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *SecurityGroupRuleSet) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SecurityGroupRuleSet) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SecurityGroupRuleSet) GetPortRangeMin() int32 {
	if x != nil {
		return x.PortRangeMin
	}
	return 0
}

func (x *SecurityGroupRuleSet) GetPortRangeMax() int32 {
	if x != nil {
		return x.PortRangeMax
	}
	return 0
}

func (x *SecurityGroupRuleSet) GetRemoteIpPrefix() string {
	if x != nil {
		return x.RemoteIpPrefix
	}
	return ""
}

type CreateSecurityGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey                string                  `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId              string                  `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid        string                  `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	SecurityGroupName     string                  `protobuf:"bytes,4,opt,name=security_group_name,json=securityGroupName,proto3" json:"security_group_name,omitempty"`
	SecurityGroupDesc     string                  `protobuf:"bytes,5,opt,name=security_group_desc,json=securityGroupDesc,proto3" json:"security_group_desc,omitempty"`
	SecurityGroupRuleSets []*SecurityGroupRuleSet `protobuf:"bytes,6,rep,name=security_group_rule_sets,json=securityGroupRuleSets,proto3" json:"security_group_rule_sets,omitempty"`
}

func (x *CreateSecurityGroupReq) Reset() {
	*x = CreateSecurityGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupReq) ProtoMessage() {}

func (x *CreateSecurityGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupReq.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupReq) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSecurityGroupReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *CreateSecurityGroupReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateSecurityGroupReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *CreateSecurityGroupReq) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

func (x *CreateSecurityGroupReq) GetSecurityGroupDesc() string {
	if x != nil {
		return x.SecurityGroupDesc
	}
	return ""
}

func (x *CreateSecurityGroupReq) GetSecurityGroupRuleSets() []*SecurityGroupRuleSet {
	if x != nil {
		return x.SecurityGroupRuleSets
	}
	return nil
}

type GetSecurityGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey          string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId        string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid  string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
}

func (x *GetSecurityGroupReq) Reset() {
	*x = GetSecurityGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityGroupReq) ProtoMessage() {}

func (x *GetSecurityGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityGroupReq.ProtoReflect.Descriptor instead.
func (*GetSecurityGroupReq) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{3}
}

func (x *GetSecurityGroupReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *GetSecurityGroupReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetSecurityGroupReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *GetSecurityGroupReq) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type UpdateSecurityGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey                string                  `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId              string                  `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid        string                  `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	SecurityGroupId       string                  `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	SecurityGroupName     string                  `protobuf:"bytes,5,opt,name=security_group_name,json=securityGroupName,proto3" json:"security_group_name,omitempty"`
	SecurityGroupDesc     string                  `protobuf:"bytes,6,opt,name=security_group_desc,json=securityGroupDesc,proto3" json:"security_group_desc,omitempty"`
	SecurityGroupRuleSets []*SecurityGroupRuleSet `protobuf:"bytes,7,rep,name=security_group_rule_sets,json=securityGroupRuleSets,proto3" json:"security_group_rule_sets,omitempty"`
}

func (x *UpdateSecurityGroupReq) Reset() {
	*x = UpdateSecurityGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecurityGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityGroupReq) ProtoMessage() {}

func (x *UpdateSecurityGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateSecurityGroupReq) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSecurityGroupReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetSecurityGroupDesc() string {
	if x != nil {
		return x.SecurityGroupDesc
	}
	return ""
}

func (x *UpdateSecurityGroupReq) GetSecurityGroupRuleSets() []*SecurityGroupRuleSet {
	if x != nil {
		return x.SecurityGroupRuleSets
	}
	return nil
}

type DeleteSecurityGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey          string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId        string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid  string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
}

func (x *DeleteSecurityGroupReq) Reset() {
	*x = DeleteSecurityGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupReq) ProtoMessage() {}

func (x *DeleteSecurityGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupReq) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSecurityGroupReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *DeleteSecurityGroupReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteSecurityGroupReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *DeleteSecurityGroupReq) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type DeleteSecurityGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg             string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SecurityGroupId string `protobuf:"bytes,3,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	DeletedTime     string `protobuf:"bytes,4,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`
}

func (x *DeleteSecurityGroupRes) Reset() {
	*x = DeleteSecurityGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupRes) ProtoMessage() {}

func (x *DeleteSecurityGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupRes.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupRes) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSecurityGroupRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteSecurityGroupRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteSecurityGroupRes) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *DeleteSecurityGroupRes) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

type OperateSecurityGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey          string   `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId        string   `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid  string   `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	SecurityGroupId string   `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	InstanceIds     []string `protobuf:"bytes,5,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	OpsType         string   `protobuf:"bytes,6,opt,name=ops_type,json=opsType,proto3" json:"ops_type,omitempty"` //attach or detach
}

func (x *OperateSecurityGroupReq) Reset() {
	*x = OperateSecurityGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateSecurityGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateSecurityGroupReq) ProtoMessage() {}

func (x *OperateSecurityGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateSecurityGroupReq.ProtoReflect.Descriptor instead.
func (*OperateSecurityGroupReq) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{7}
}

func (x *OperateSecurityGroupReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *OperateSecurityGroupReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OperateSecurityGroupReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *OperateSecurityGroupReq) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *OperateSecurityGroupReq) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *OperateSecurityGroupReq) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

type OperateSecurityGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg             string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SecurityGroupId string `protobuf:"bytes,3,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	OpsType         string `protobuf:"bytes,4,opt,name=ops_type,json=opsType,proto3" json:"ops_type,omitempty"`
	OperateedTime   string `protobuf:"bytes,5,opt,name=operateed_time,json=operateedTime,proto3" json:"operateed_time,omitempty"`
}

func (x *OperateSecurityGroupRes) Reset() {
	*x = OperateSecurityGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateSecurityGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateSecurityGroupRes) ProtoMessage() {}

func (x *OperateSecurityGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateSecurityGroupRes.ProtoReflect.Descriptor instead.
func (*OperateSecurityGroupRes) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{8}
}

func (x *OperateSecurityGroupRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OperateSecurityGroupRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *OperateSecurityGroupRes) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *OperateSecurityGroupRes) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

func (x *OperateSecurityGroupRes) GetOperateedTime() string {
	if x != nil {
		return x.OperateedTime
	}
	return ""
}

type SecurityGroupRes_SecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupId    string                                              `protobuf:"bytes,1,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	SecurityGroupName  string                                              `protobuf:"bytes,2,opt,name=security_group_name,json=securityGroupName,proto3" json:"security_group_name,omitempty"`
	SecurityGroupDesc  string                                              `protobuf:"bytes,3,opt,name=security_group_desc,json=securityGroupDesc,proto3" json:"security_group_desc,omitempty"`
	SecurityGroupRules []*SecurityGroupRes_SecurityGroup_SecurityGroupRule `protobuf:"bytes,4,rep,name=security_group_rules,json=securityGroupRules,proto3" json:"security_group_rules,omitempty"`
	CreatedTime        string                                              `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime        string                                              `protobuf:"bytes,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *SecurityGroupRes_SecurityGroup) Reset() {
	*x = SecurityGroupRes_SecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRes_SecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRes_SecurityGroup) ProtoMessage() {}

func (x *SecurityGroupRes_SecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRes_SecurityGroup.ProtoReflect.Descriptor instead.
func (*SecurityGroupRes_SecurityGroup) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SecurityGroupRes_SecurityGroup) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup) GetSecurityGroupDesc() string {
	if x != nil {
		return x.SecurityGroupDesc
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup) GetSecurityGroupRules() []*SecurityGroupRes_SecurityGroup_SecurityGroupRule {
	if x != nil {
		return x.SecurityGroupRules
	}
	return nil
}

func (x *SecurityGroupRes_SecurityGroup) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

type SecurityGroupRes_SecurityGroup_SecurityGroupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId          string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleDesc        string `protobuf:"bytes,2,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"`
	Direction       string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	Protocol        string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	PortRangeMin    int32  `protobuf:"varint,5,opt,name=port_range_min,json=portRangeMin,proto3" json:"port_range_min,omitempty"`
	PortRangeMax    int32  `protobuf:"varint,6,opt,name=port_range_max,json=portRangeMax,proto3" json:"port_range_max,omitempty"`
	RemoteIpPrefix  string `protobuf:"bytes,7,opt,name=remote_ip_prefix,json=remoteIpPrefix,proto3" json:"remote_ip_prefix,omitempty"`
	SecurityGroupId string `protobuf:"bytes,8,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	CreatedTime     string `protobuf:"bytes,9,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime     string `protobuf:"bytes,10,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) Reset() {
	*x = SecurityGroupRes_SecurityGroup_SecurityGroupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRes_SecurityGroup_SecurityGroupRule) ProtoMessage() {}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_security_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRes_SecurityGroup_SecurityGroupRule.ProtoReflect.Descriptor instead.
func (*SecurityGroupRes_SecurityGroup_SecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_security_group_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetPortRangeMin() int32 {
	if x != nil {
		return x.PortRangeMin
	}
	return 0
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetPortRangeMax() int32 {
	if x != nil {
		return x.PortRangeMax
	}
	return 0
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetRemoteIpPrefix() string {
	if x != nil {
		return x.RemoteIpPrefix
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *SecurityGroupRes_SecurityGroup_SecurityGroupRule) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

var File_security_group_proto protoreflect.FileDescriptor

var file_security_group_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd3, 0x06, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x54, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc2, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x71, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xeb, 0x02,
	0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x22, 0xb4, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x5c, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xfa, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_group_proto_rawDescOnce sync.Once
	file_security_group_proto_rawDescData = file_security_group_proto_rawDesc
)

func file_security_group_proto_rawDescGZIP() []byte {
	file_security_group_proto_rawDescOnce.Do(func() {
		file_security_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_group_proto_rawDescData)
	})
	return file_security_group_proto_rawDescData
}

var file_security_group_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_security_group_proto_goTypes = []interface{}{
	(*SecurityGroupRes)(nil),                                 // 0: securitygroup.SecurityGroupRes
	(*SecurityGroupRuleSet)(nil),                             // 1: securitygroup.SecurityGroupRuleSet
	(*CreateSecurityGroupReq)(nil),                           // 2: securitygroup.CreateSecurityGroupReq
	(*GetSecurityGroupReq)(nil),                              // 3: securitygroup.GetSecurityGroupReq
	(*UpdateSecurityGroupReq)(nil),                           // 4: securitygroup.UpdateSecurityGroupReq
	(*DeleteSecurityGroupReq)(nil),                           // 5: securitygroup.DeleteSecurityGroupReq
	(*DeleteSecurityGroupRes)(nil),                           // 6: securitygroup.DeleteSecurityGroupRes
	(*OperateSecurityGroupReq)(nil),                          // 7: securitygroup.OperateSecurityGroupReq
	(*OperateSecurityGroupRes)(nil),                          // 8: securitygroup.OperateSecurityGroupRes
	(*SecurityGroupRes_SecurityGroup)(nil),                   // 9: securitygroup.SecurityGroupRes.SecurityGroup
	(*SecurityGroupRes_SecurityGroup_SecurityGroupRule)(nil), // 10: securitygroup.SecurityGroupRes.SecurityGroup.SecurityGroupRule
}
var file_security_group_proto_depIdxs = []int32{
	9,  // 0: securitygroup.SecurityGroupRes.security_group:type_name -> securitygroup.SecurityGroupRes.SecurityGroup
	1,  // 1: securitygroup.CreateSecurityGroupReq.security_group_rule_sets:type_name -> securitygroup.SecurityGroupRuleSet
	1,  // 2: securitygroup.UpdateSecurityGroupReq.security_group_rule_sets:type_name -> securitygroup.SecurityGroupRuleSet
	10, // 3: securitygroup.SecurityGroupRes.SecurityGroup.security_group_rules:type_name -> securitygroup.SecurityGroupRes.SecurityGroup.SecurityGroupRule
	2,  // 4: securitygroup.SecurityGroupService.CreateSecurityGroup:input_type -> securitygroup.CreateSecurityGroupReq
	3,  // 5: securitygroup.SecurityGroupService.GetSecurityGroup:input_type -> securitygroup.GetSecurityGroupReq
	4,  // 6: securitygroup.SecurityGroupService.UpdateSecurityGroup:input_type -> securitygroup.UpdateSecurityGroupReq
	5,  // 7: securitygroup.SecurityGroupService.DeleteSecurityGroup:input_type -> securitygroup.DeleteSecurityGroupReq
	7,  // 8: securitygroup.SecurityGroupService.OperateSecurityGroup:input_type -> securitygroup.OperateSecurityGroupReq
	0,  // 9: securitygroup.SecurityGroupService.CreateSecurityGroup:output_type -> securitygroup.SecurityGroupRes
	0,  // 10: securitygroup.SecurityGroupService.GetSecurityGroup:output_type -> securitygroup.SecurityGroupRes
	0,  // 11: securitygroup.SecurityGroupService.UpdateSecurityGroup:output_type -> securitygroup.SecurityGroupRes
	6,  // 12: securitygroup.SecurityGroupService.DeleteSecurityGroup:output_type -> securitygroup.DeleteSecurityGroupRes
	8,  // 13: securitygroup.SecurityGroupService.OperateSecurityGroup:output_type -> securitygroup.OperateSecurityGroupRes
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_security_group_proto_init() }
func file_security_group_proto_init() {
	if File_security_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_security_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecurityGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateSecurityGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateSecurityGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRes_SecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRes_SecurityGroup_SecurityGroupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_security_group_proto_goTypes,
		DependencyIndexes: file_security_group_proto_depIdxs,
		MessageInfos:      file_security_group_proto_msgTypes,
	}.Build()
	File_security_group_proto = out.File
	file_security_group_proto_rawDesc = nil
	file_security_group_proto_goTypes = nil
	file_security_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SecurityGroupServiceClient is the client API for SecurityGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecurityGroupServiceClient interface {
	//创建安全组
	CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error)
	//获取安全组信息
	GetSecurityGroup(ctx context.Context, in *GetSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error)
	//修改安全组
	UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error)
	//删除安全组
	DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupReq, opts ...grpc.CallOption) (*DeleteSecurityGroupRes, error)
	//安全组关联/取关云主机
	OperateSecurityGroup(ctx context.Context, in *OperateSecurityGroupReq, opts ...grpc.CallOption) (*OperateSecurityGroupRes, error)
}

type securityGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityGroupServiceClient(cc grpc.ClientConnInterface) SecurityGroupServiceClient {
	return &securityGroupServiceClient{cc}
}

func (c *securityGroupServiceClient) CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error) {
	out := new(SecurityGroupRes)
	err := c.cc.Invoke(ctx, "/securitygroup.SecurityGroupService/CreateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupServiceClient) GetSecurityGroup(ctx context.Context, in *GetSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error) {
	out := new(SecurityGroupRes)
	err := c.cc.Invoke(ctx, "/securitygroup.SecurityGroupService/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupServiceClient) UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupReq, opts ...grpc.CallOption) (*SecurityGroupRes, error) {
	out := new(SecurityGroupRes)
	err := c.cc.Invoke(ctx, "/securitygroup.SecurityGroupService/UpdateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupServiceClient) DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupReq, opts ...grpc.CallOption) (*DeleteSecurityGroupRes, error) {
	out := new(DeleteSecurityGroupRes)
	err := c.cc.Invoke(ctx, "/securitygroup.SecurityGroupService/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupServiceClient) OperateSecurityGroup(ctx context.Context, in *OperateSecurityGroupReq, opts ...grpc.CallOption) (*OperateSecurityGroupRes, error) {
	out := new(OperateSecurityGroupRes)
	err := c.cc.Invoke(ctx, "/securitygroup.SecurityGroupService/OperateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityGroupServiceServer is the server API for SecurityGroupService service.
type SecurityGroupServiceServer interface {
	//创建安全组
	CreateSecurityGroup(context.Context, *CreateSecurityGroupReq) (*SecurityGroupRes, error)
	//获取安全组信息
	GetSecurityGroup(context.Context, *GetSecurityGroupReq) (*SecurityGroupRes, error)
	//修改安全组
	UpdateSecurityGroup(context.Context, *UpdateSecurityGroupReq) (*SecurityGroupRes, error)
	//删除安全组
	DeleteSecurityGroup(context.Context, *DeleteSecurityGroupReq) (*DeleteSecurityGroupRes, error)
	//安全组关联/取关云主机
	OperateSecurityGroup(context.Context, *OperateSecurityGroupReq) (*OperateSecurityGroupRes, error)
}

// UnimplementedSecurityGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSecurityGroupServiceServer struct {
}

func (*UnimplementedSecurityGroupServiceServer) CreateSecurityGroup(context.Context, *CreateSecurityGroupReq) (*SecurityGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupServiceServer) GetSecurityGroup(context.Context, *GetSecurityGroupReq) (*SecurityGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupServiceServer) UpdateSecurityGroup(context.Context, *UpdateSecurityGroupReq) (*SecurityGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupServiceServer) DeleteSecurityGroup(context.Context, *DeleteSecurityGroupReq) (*DeleteSecurityGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupServiceServer) OperateSecurityGroup(context.Context, *OperateSecurityGroupReq) (*OperateSecurityGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateSecurityGroup not implemented")
}

func RegisterSecurityGroupServiceServer(s *grpc.Server, srv SecurityGroupServiceServer) {
	s.RegisterService(&_SecurityGroupService_serviceDesc, srv)
}

func _SecurityGroupService_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupServiceServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securitygroup.SecurityGroupService/CreateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupServiceServer).CreateSecurityGroup(ctx, req.(*CreateSecurityGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupService_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupServiceServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securitygroup.SecurityGroupService/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupServiceServer).GetSecurityGroup(ctx, req.(*GetSecurityGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupService_UpdateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupServiceServer).UpdateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securitygroup.SecurityGroupService/UpdateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupServiceServer).UpdateSecurityGroup(ctx, req.(*UpdateSecurityGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupService_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupServiceServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securitygroup.SecurityGroupService/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupServiceServer).DeleteSecurityGroup(ctx, req.(*DeleteSecurityGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupService_OperateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateSecurityGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupServiceServer).OperateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/securitygroup.SecurityGroupService/OperateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupServiceServer).OperateSecurityGroup(ctx, req.(*OperateSecurityGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecurityGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "securitygroup.SecurityGroupService",
	HandlerType: (*SecurityGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecurityGroup",
			Handler:    _SecurityGroupService_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _SecurityGroupService_GetSecurityGroup_Handler,
		},
		{
			MethodName: "UpdateSecurityGroup",
			Handler:    _SecurityGroupService_UpdateSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _SecurityGroupService_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "OperateSecurityGroup",
			Handler:    _SecurityGroupService_OperateSecurityGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security_group.proto",
}

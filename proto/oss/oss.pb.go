// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: oss.proto

// 指定文件生成出来的package

package oss

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OssBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName        string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	BucketPolicy      string `protobuf:"bytes,2,opt,name=bucket_policy,json=bucketPolicy,proto3" json:"bucket_policy,omitempty"` //private/public-ro/public-rw
	BucketUseSizeInG  int32  `protobuf:"varint,3,opt,name=bucket_use_size_in_g,json=bucketUseSizeInG,proto3" json:"bucket_use_size_in_g,omitempty"`
	BucketUseObjects  int32  `protobuf:"varint,4,opt,name=bucket_use_objects,json=bucketUseObjects,proto3" json:"bucket_use_objects,omitempty"`
	BelongToUid       string `protobuf:"bytes,5,opt,name=belong_to_uid,json=belongToUid,proto3" json:"belong_to_uid,omitempty"`
	BucketCreatedTime string `protobuf:"bytes,6,opt,name=bucket_created_time,json=bucketCreatedTime,proto3" json:"bucket_created_time,omitempty"`
}

func (x *OssBucket) Reset() {
	*x = OssBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OssBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OssBucket) ProtoMessage() {}

func (x *OssBucket) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OssBucket.ProtoReflect.Descriptor instead.
func (*OssBucket) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{0}
}

func (x *OssBucket) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *OssBucket) GetBucketPolicy() string {
	if x != nil {
		return x.BucketPolicy
	}
	return ""
}

func (x *OssBucket) GetBucketUseSizeInG() int32 {
	if x != nil {
		return x.BucketUseSizeInG
	}
	return 0
}

func (x *OssBucket) GetBucketUseObjects() int32 {
	if x != nil {
		return x.BucketUseObjects
	}
	return 0
}

func (x *OssBucket) GetBelongToUid() string {
	if x != nil {
		return x.BelongToUid
	}
	return ""
}

func (x *OssBucket) GetBucketCreatedTime() string {
	if x != nil {
		return x.BucketCreatedTime
	}
	return ""
}

type OssUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OssUid             string `protobuf:"bytes,1,opt,name=oss_uid,json=ossUid,proto3" json:"oss_uid,omitempty"`
	OssUserCreatedTime string `protobuf:"bytes,2,opt,name=oss_user_created_time,json=ossUserCreatedTime,proto3" json:"oss_user_created_time,omitempty"`
	UserMaxSizeInG     int32  `protobuf:"varint,3,opt,name=user_max_size_in_g,json=userMaxSizeInG,proto3" json:"user_max_size_in_g,omitempty"`
	UserMaxObjects     int32  `protobuf:"varint,4,opt,name=user_max_objects,json=userMaxObjects,proto3" json:"user_max_objects,omitempty"`
	UserUseSizeInG     int32  `protobuf:"varint,5,opt,name=user_use_size_in_g,json=userUseSizeInG,proto3" json:"user_use_size_in_g,omitempty"`
	UserUseObjects     int32  `protobuf:"varint,6,opt,name=user_use_objects,json=userUseObjects,proto3" json:"user_use_objects,omitempty"`
	UserCreatedTime    string `protobuf:"bytes,7,opt,name=user_created_time,json=userCreatedTime,proto3" json:"user_created_time,omitempty"`
	TotalBuckets       int32  `protobuf:"varint,8,opt,name=total_buckets,json=totalBuckets,proto3" json:"total_buckets,omitempty"`
}

func (x *OssUser) Reset() {
	*x = OssUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OssUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OssUser) ProtoMessage() {}

func (x *OssUser) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OssUser.ProtoReflect.Descriptor instead.
func (*OssUser) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{1}
}

func (x *OssUser) GetOssUid() string {
	if x != nil {
		return x.OssUid
	}
	return ""
}

func (x *OssUser) GetOssUserCreatedTime() string {
	if x != nil {
		return x.OssUserCreatedTime
	}
	return ""
}

func (x *OssUser) GetUserMaxSizeInG() int32 {
	if x != nil {
		return x.UserMaxSizeInG
	}
	return 0
}

func (x *OssUser) GetUserMaxObjects() int32 {
	if x != nil {
		return x.UserMaxObjects
	}
	return 0
}

func (x *OssUser) GetUserUseSizeInG() int32 {
	if x != nil {
		return x.UserUseSizeInG
	}
	return 0
}

func (x *OssUser) GetUserUseObjects() int32 {
	if x != nil {
		return x.UserUseObjects
	}
	return 0
}

func (x *OssUser) GetUserCreatedTime() string {
	if x != nil {
		return x.UserCreatedTime
	}
	return ""
}

func (x *OssUser) GetTotalBuckets() int32 {
	if x != nil {
		return x.TotalBuckets
	}
	return 0
}

type CreateUserAndBucketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	Region         string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	BucketName     string `protobuf:"bytes,6,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	StoregeType    string `protobuf:"bytes,7,opt,name=storege_type,json=storegeType,proto3" json:"storege_type,omitempty"`
	UserMaxSizeInG int32  `protobuf:"varint,8,opt,name=user_max_size_in_g,json=userMaxSizeInG,proto3" json:"user_max_size_in_g,omitempty"`
	UserMaxObjects int32  `protobuf:"varint,9,opt,name=user_max_objects,json=userMaxObjects,proto3" json:"user_max_objects,omitempty"`
	BucketPolicy   string `protobuf:"bytes,10,opt,name=bucket_policy,json=bucketPolicy,proto3" json:"bucket_policy,omitempty"`
}

func (x *CreateUserAndBucketReq) Reset() {
	*x = CreateUserAndBucketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserAndBucketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserAndBucketReq) ProtoMessage() {}

func (x *CreateUserAndBucketReq) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserAndBucketReq.ProtoReflect.Descriptor instead.
func (*CreateUserAndBucketReq) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{2}
}

func (x *CreateUserAndBucketReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetStoregeType() string {
	if x != nil {
		return x.StoregeType
	}
	return ""
}

func (x *CreateUserAndBucketReq) GetUserMaxSizeInG() int32 {
	if x != nil {
		return x.UserMaxSizeInG
	}
	return 0
}

func (x *CreateUserAndBucketReq) GetUserMaxObjects() int32 {
	if x != nil {
		return x.UserMaxObjects
	}
	return 0
}

func (x *CreateUserAndBucketReq) GetBucketPolicy() string {
	if x != nil {
		return x.BucketPolicy
	}
	return ""
}

type CreateUserAndBucketRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg          string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OssEndpoint  string     `protobuf:"bytes,3,opt,name=oss_endpoint,json=ossEndpoint,proto3" json:"oss_endpoint,omitempty"`
	OssAccessKey string     `protobuf:"bytes,4,opt,name=oss_access_key,json=ossAccessKey,proto3" json:"oss_access_key,omitempty"`
	OssSecretKey string     `protobuf:"bytes,5,opt,name=oss_secret_key,json=ossSecretKey,proto3" json:"oss_secret_key,omitempty"`
	OssUser      *OssUser   `protobuf:"bytes,6,opt,name=oss_user,json=ossUser,proto3" json:"oss_user,omitempty"`
	OssBucket    *OssBucket `protobuf:"bytes,7,opt,name=oss_bucket,json=ossBucket,proto3" json:"oss_bucket,omitempty"`
}

func (x *CreateUserAndBucketRes) Reset() {
	*x = CreateUserAndBucketRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserAndBucketRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserAndBucketRes) ProtoMessage() {}

func (x *CreateUserAndBucketRes) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserAndBucketRes.ProtoReflect.Descriptor instead.
func (*CreateUserAndBucketRes) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUserAndBucketRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateUserAndBucketRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateUserAndBucketRes) GetOssEndpoint() string {
	if x != nil {
		return x.OssEndpoint
	}
	return ""
}

func (x *CreateUserAndBucketRes) GetOssAccessKey() string {
	if x != nil {
		return x.OssAccessKey
	}
	return ""
}

func (x *CreateUserAndBucketRes) GetOssSecretKey() string {
	if x != nil {
		return x.OssSecretKey
	}
	return ""
}

func (x *CreateUserAndBucketRes) GetOssUser() *OssUser {
	if x != nil {
		return x.OssUser
	}
	return nil
}

func (x *CreateUserAndBucketRes) GetOssBucket() *OssBucket {
	if x != nil {
		return x.OssBucket
	}
	return nil
}

type GetBucketInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	Region         string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	OssUid         string `protobuf:"bytes,5,opt,name=oss_uid,json=ossUid,proto3" json:"oss_uid,omitempty"`
	BucketName     string `protobuf:"bytes,6,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *GetBucketInfoReq) Reset() {
	*x = GetBucketInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBucketInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketInfoReq) ProtoMessage() {}

func (x *GetBucketInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketInfoReq.ProtoReflect.Descriptor instead.
func (*GetBucketInfoReq) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{4}
}

func (x *GetBucketInfoReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *GetBucketInfoReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetBucketInfoReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *GetBucketInfoReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetBucketInfoReq) GetOssUid() string {
	if x != nil {
		return x.OssUid
	}
	return ""
}

func (x *GetBucketInfoReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type GetBucketInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OssBucket *OssBucket `protobuf:"bytes,3,opt,name=oss_bucket,json=ossBucket,proto3" json:"oss_bucket,omitempty"`
}

func (x *GetBucketInfoRes) Reset() {
	*x = GetBucketInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBucketInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketInfoRes) ProtoMessage() {}

func (x *GetBucketInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketInfoRes.ProtoReflect.Descriptor instead.
func (*GetBucketInfoRes) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{5}
}

func (x *GetBucketInfoRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBucketInfoRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetBucketInfoRes) GetOssBucket() *OssBucket {
	if x != nil {
		return x.OssBucket
	}
	return nil
}

type ListBucketsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	Region         string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	OssUid         string `protobuf:"bytes,5,opt,name=oss_uid,json=ossUid,proto3" json:"oss_uid,omitempty"`
	PageNumber     int32  `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize       int32  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListBucketsInfoReq) Reset() {
	*x = ListBucketsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsInfoReq) ProtoMessage() {}

func (x *ListBucketsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsInfoReq.ProtoReflect.Descriptor instead.
func (*ListBucketsInfoReq) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{6}
}

func (x *ListBucketsInfoReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *ListBucketsInfoReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListBucketsInfoReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *ListBucketsInfoReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListBucketsInfoReq) GetOssUid() string {
	if x != nil {
		return x.OssUid
	}
	return ""
}

func (x *ListBucketsInfoReq) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListBucketsInfoReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListBucketsInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg        string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OssBuckets []*OssBucket `protobuf:"bytes,3,rep,name=oss_buckets,json=ossBuckets,proto3" json:"oss_buckets,omitempty"`
}

func (x *ListBucketsInfoRes) Reset() {
	*x = ListBucketsInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsInfoRes) ProtoMessage() {}

func (x *ListBucketsInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsInfoRes.ProtoReflect.Descriptor instead.
func (*ListBucketsInfoRes) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{7}
}

func (x *ListBucketsInfoRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListBucketsInfoRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListBucketsInfoRes) GetOssBuckets() []*OssBucket {
	if x != nil {
		return x.OssBuckets
	}
	return nil
}

type SetOssUserQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	Region         string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	OssUid         string `protobuf:"bytes,5,opt,name=oss_uid,json=ossUid,proto3" json:"oss_uid,omitempty"`
	UserMaxSizeInG int32  `protobuf:"varint,6,opt,name=user_max_size_in_g,json=userMaxSizeInG,proto3" json:"user_max_size_in_g,omitempty"`
	UserMaxObjects int32  `protobuf:"varint,7,opt,name=user_max_objects,json=userMaxObjects,proto3" json:"user_max_objects,omitempty"`
}

func (x *SetOssUserQuotaReq) Reset() {
	*x = SetOssUserQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOssUserQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOssUserQuotaReq) ProtoMessage() {}

func (x *SetOssUserQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOssUserQuotaReq.ProtoReflect.Descriptor instead.
func (*SetOssUserQuotaReq) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{8}
}

func (x *SetOssUserQuotaReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *SetOssUserQuotaReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SetOssUserQuotaReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *SetOssUserQuotaReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SetOssUserQuotaReq) GetOssUid() string {
	if x != nil {
		return x.OssUid
	}
	return ""
}

func (x *SetOssUserQuotaReq) GetUserMaxSizeInG() int32 {
	if x != nil {
		return x.UserMaxSizeInG
	}
	return 0
}

func (x *SetOssUserQuotaReq) GetUserMaxObjects() int32 {
	if x != nil {
		return x.UserMaxObjects
	}
	return 0
}

type SetOssUserQuotaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OssUser *OssUser `protobuf:"bytes,3,opt,name=oss_user,json=ossUser,proto3" json:"oss_user,omitempty"`
}

func (x *SetOssUserQuotaRes) Reset() {
	*x = SetOssUserQuotaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOssUserQuotaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOssUserQuotaRes) ProtoMessage() {}

func (x *SetOssUserQuotaRes) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOssUserQuotaRes.ProtoReflect.Descriptor instead.
func (*SetOssUserQuotaRes) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{9}
}

func (x *SetOssUserQuotaRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetOssUserQuotaRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SetOssUserQuotaRes) GetOssUser() *OssUser {
	if x != nil {
		return x.OssUser
	}
	return nil
}

type RecoverKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	Region         string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	OssUid         string `protobuf:"bytes,5,opt,name=oss_uid,json=ossUid,proto3" json:"oss_uid,omitempty"`
}

func (x *RecoverKeyReq) Reset() {
	*x = RecoverKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverKeyReq) ProtoMessage() {}

func (x *RecoverKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverKeyReq.ProtoReflect.Descriptor instead.
func (*RecoverKeyReq) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{10}
}

func (x *RecoverKeyReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *RecoverKeyReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RecoverKeyReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *RecoverKeyReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RecoverKeyReq) GetOssUid() string {
	if x != nil {
		return x.OssUid
	}
	return ""
}

type RecoverKeyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	OssEndpoint  string `protobuf:"bytes,3,opt,name=oss_endpoint,json=ossEndpoint,proto3" json:"oss_endpoint,omitempty"`
	OssAccessKey string `protobuf:"bytes,4,opt,name=oss_access_key,json=ossAccessKey,proto3" json:"oss_access_key,omitempty"`
	OssSecretKey string `protobuf:"bytes,5,opt,name=oss_secret_key,json=ossSecretKey,proto3" json:"oss_secret_key,omitempty"`
}

func (x *RecoverKeyRes) Reset() {
	*x = RecoverKeyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oss_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverKeyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverKeyRes) ProtoMessage() {}

func (x *RecoverKeyRes) ProtoReflect() protoreflect.Message {
	mi := &file_oss_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverKeyRes.ProtoReflect.Descriptor instead.
func (*RecoverKeyRes) Descriptor() ([]byte, []int) {
	return file_oss_proto_rawDescGZIP(), []int{11}
}

func (x *RecoverKeyRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RecoverKeyRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RecoverKeyRes) GetOssEndpoint() string {
	if x != nil {
		return x.OssEndpoint
	}
	return ""
}

func (x *RecoverKeyRes) GetOssAccessKey() string {
	if x != nil {
		return x.OssAccessKey
	}
	return ""
}

func (x *RecoverKeyRes) GetOssSecretKey() string {
	if x != nil {
		return x.OssSecretKey
	}
	return ""
}

var File_oss_proto protoreflect.FileDescriptor

var file_oss_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x73, 0x73,
	0x22, 0x83, 0x02, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x14, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x47, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x54, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x07, 0x4f, 0x73, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6f,
	0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x12, 0x28, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x85, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x6f,
	0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6f, 0x73, 0x73, 0x2e, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x73, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x4f,
	0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x6f, 0x73, 0x73, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x4f, 0x73, 0x73,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x6f, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x4f, 0x73, 0x73,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x6f, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x47, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x63,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x73,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f,
	0x73, 0x73, 0x2e, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x32, 0xdc, 0x02, 0x0a, 0x0a,
	0x4f, 0x53, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x6f,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e,
	0x6f, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x17, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x73,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6f, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_oss_proto_rawDescOnce sync.Once
	file_oss_proto_rawDescData = file_oss_proto_rawDesc
)

func file_oss_proto_rawDescGZIP() []byte {
	file_oss_proto_rawDescOnce.Do(func() {
		file_oss_proto_rawDescData = protoimpl.X.CompressGZIP(file_oss_proto_rawDescData)
	})
	return file_oss_proto_rawDescData
}

var file_oss_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_oss_proto_goTypes = []interface{}{
	(*OssBucket)(nil),              // 0: oss.OssBucket
	(*OssUser)(nil),                // 1: oss.OssUser
	(*CreateUserAndBucketReq)(nil), // 2: oss.CreateUserAndBucketReq
	(*CreateUserAndBucketRes)(nil), // 3: oss.CreateUserAndBucketRes
	(*GetBucketInfoReq)(nil),       // 4: oss.GetBucketInfoReq
	(*GetBucketInfoRes)(nil),       // 5: oss.GetBucketInfoRes
	(*ListBucketsInfoReq)(nil),     // 6: oss.ListBucketsInfoReq
	(*ListBucketsInfoRes)(nil),     // 7: oss.ListBucketsInfoRes
	(*SetOssUserQuotaReq)(nil),     // 8: oss.SetOssUserQuotaReq
	(*SetOssUserQuotaRes)(nil),     // 9: oss.SetOssUserQuotaRes
	(*RecoverKeyReq)(nil),          // 10: oss.RecoverKeyReq
	(*RecoverKeyRes)(nil),          // 11: oss.RecoverKeyRes
}
var file_oss_proto_depIdxs = []int32{
	1,  // 0: oss.CreateUserAndBucketRes.oss_user:type_name -> oss.OssUser
	0,  // 1: oss.CreateUserAndBucketRes.oss_bucket:type_name -> oss.OssBucket
	0,  // 2: oss.GetBucketInfoRes.oss_bucket:type_name -> oss.OssBucket
	0,  // 3: oss.ListBucketsInfoRes.oss_buckets:type_name -> oss.OssBucket
	1,  // 4: oss.SetOssUserQuotaRes.oss_user:type_name -> oss.OssUser
	2,  // 5: oss.OSSService.CreateUserAndBucket:input_type -> oss.CreateUserAndBucketReq
	4,  // 6: oss.OSSService.GetBucketInfo:input_type -> oss.GetBucketInfoReq
	6,  // 7: oss.OSSService.ListBucketsInfo:input_type -> oss.ListBucketsInfoReq
	8,  // 8: oss.OSSService.SetOssUserQuota:input_type -> oss.SetOssUserQuotaReq
	10, // 9: oss.OSSService.RecoverKey:input_type -> oss.RecoverKeyReq
	3,  // 10: oss.OSSService.CreateUserAndBucket:output_type -> oss.CreateUserAndBucketRes
	5,  // 11: oss.OSSService.GetBucketInfo:output_type -> oss.GetBucketInfoRes
	7,  // 12: oss.OSSService.ListBucketsInfo:output_type -> oss.ListBucketsInfoRes
	9,  // 13: oss.OSSService.SetOssUserQuota:output_type -> oss.SetOssUserQuotaRes
	11, // 14: oss.OSSService.RecoverKey:output_type -> oss.RecoverKeyRes
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_oss_proto_init() }
func file_oss_proto_init() {
	if File_oss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OssBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OssUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserAndBucketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserAndBucketRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBucketInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBucketInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOssUserQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOssUserQuotaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oss_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverKeyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oss_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_oss_proto_goTypes,
		DependencyIndexes: file_oss_proto_depIdxs,
		MessageInfos:      file_oss_proto_msgTypes,
	}.Build()
	File_oss_proto = out.File
	file_oss_proto_rawDesc = nil
	file_oss_proto_goTypes = nil
	file_oss_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OSSServiceClient is the client API for OSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OSSServiceClient interface {
	//创建Oss账号和bucket
	CreateUserAndBucket(ctx context.Context, in *CreateUserAndBucketReq, opts ...grpc.CallOption) (*CreateUserAndBucketRes, error)
	//查看具体一个bucket详情
	GetBucketInfo(ctx context.Context, in *GetBucketInfoReq, opts ...grpc.CallOption) (*GetBucketInfoRes, error)
	//列出云管平台用户在一个entrypoint下的bucet列表
	ListBucketsInfo(ctx context.Context, in *ListBucketsInfoReq, opts ...grpc.CallOption) (*ListBucketsInfoRes, error)
	//扩容oss_user配额
	SetOssUserQuota(ctx context.Context, in *SetOssUserQuotaReq, opts ...grpc.CallOption) (*SetOssUserQuotaRes, error)
	//找回key
	RecoverKey(ctx context.Context, in *RecoverKeyReq, opts ...grpc.CallOption) (*RecoverKeyRes, error)
}

type oSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSSServiceClient(cc grpc.ClientConnInterface) OSSServiceClient {
	return &oSSServiceClient{cc}
}

func (c *oSSServiceClient) CreateUserAndBucket(ctx context.Context, in *CreateUserAndBucketReq, opts ...grpc.CallOption) (*CreateUserAndBucketRes, error) {
	out := new(CreateUserAndBucketRes)
	err := c.cc.Invoke(ctx, "/oss.OSSService/CreateUserAndBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSServiceClient) GetBucketInfo(ctx context.Context, in *GetBucketInfoReq, opts ...grpc.CallOption) (*GetBucketInfoRes, error) {
	out := new(GetBucketInfoRes)
	err := c.cc.Invoke(ctx, "/oss.OSSService/GetBucketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSServiceClient) ListBucketsInfo(ctx context.Context, in *ListBucketsInfoReq, opts ...grpc.CallOption) (*ListBucketsInfoRes, error) {
	out := new(ListBucketsInfoRes)
	err := c.cc.Invoke(ctx, "/oss.OSSService/ListBucketsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSServiceClient) SetOssUserQuota(ctx context.Context, in *SetOssUserQuotaReq, opts ...grpc.CallOption) (*SetOssUserQuotaRes, error) {
	out := new(SetOssUserQuotaRes)
	err := c.cc.Invoke(ctx, "/oss.OSSService/SetOssUserQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSServiceClient) RecoverKey(ctx context.Context, in *RecoverKeyReq, opts ...grpc.CallOption) (*RecoverKeyRes, error) {
	out := new(RecoverKeyRes)
	err := c.cc.Invoke(ctx, "/oss.OSSService/RecoverKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSSServiceServer is the server API for OSSService service.
type OSSServiceServer interface {
	//创建Oss账号和bucket
	CreateUserAndBucket(context.Context, *CreateUserAndBucketReq) (*CreateUserAndBucketRes, error)
	//查看具体一个bucket详情
	GetBucketInfo(context.Context, *GetBucketInfoReq) (*GetBucketInfoRes, error)
	//列出云管平台用户在一个entrypoint下的bucet列表
	ListBucketsInfo(context.Context, *ListBucketsInfoReq) (*ListBucketsInfoRes, error)
	//扩容oss_user配额
	SetOssUserQuota(context.Context, *SetOssUserQuotaReq) (*SetOssUserQuotaRes, error)
	//找回key
	RecoverKey(context.Context, *RecoverKeyReq) (*RecoverKeyRes, error)
}

// UnimplementedOSSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOSSServiceServer struct {
}

func (*UnimplementedOSSServiceServer) CreateUserAndBucket(context.Context, *CreateUserAndBucketReq) (*CreateUserAndBucketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAndBucket not implemented")
}
func (*UnimplementedOSSServiceServer) GetBucketInfo(context.Context, *GetBucketInfoReq) (*GetBucketInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketInfo not implemented")
}
func (*UnimplementedOSSServiceServer) ListBucketsInfo(context.Context, *ListBucketsInfoReq) (*ListBucketsInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketsInfo not implemented")
}
func (*UnimplementedOSSServiceServer) SetOssUserQuota(context.Context, *SetOssUserQuotaReq) (*SetOssUserQuotaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOssUserQuota not implemented")
}
func (*UnimplementedOSSServiceServer) RecoverKey(context.Context, *RecoverKeyReq) (*RecoverKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKey not implemented")
}

func RegisterOSSServiceServer(s *grpc.Server, srv OSSServiceServer) {
	s.RegisterService(&_OSSService_serviceDesc, srv)
}

func _OSSService_CreateUserAndBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAndBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).CreateUserAndBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/CreateUserAndBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).CreateUserAndBucket(ctx, req.(*CreateUserAndBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSSService_GetBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).GetBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/GetBucketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).GetBucketInfo(ctx, req.(*GetBucketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSSService_ListBucketsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).ListBucketsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/ListBucketsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).ListBucketsInfo(ctx, req.(*ListBucketsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSSService_SetOssUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOssUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).SetOssUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/SetOssUserQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).SetOssUserQuota(ctx, req.(*SetOssUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSSService_RecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).RecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/RecoverKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).RecoverKey(ctx, req.(*RecoverKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OSSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oss.OSSService",
	HandlerType: (*OSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAndBucket",
			Handler:    _OSSService_CreateUserAndBucket_Handler,
		},
		{
			MethodName: "GetBucketInfo",
			Handler:    _OSSService_GetBucketInfo_Handler,
		},
		{
			MethodName: "ListBucketsInfo",
			Handler:    _OSSService_ListBucketsInfo_Handler,
		},
		{
			MethodName: "SetOssUserQuota",
			Handler:    _OSSService_SetOssUserQuota_Handler,
		},
		{
			MethodName: "RecoverKey",
			Handler:    _OSSService_RecoverKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss.proto",
}

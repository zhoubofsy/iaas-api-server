// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: cloud_disk.proto

// 指定文件生成出来的package

package clouddisk

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CloudDiskConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeType string `protobuf:"bytes,1,opt,name=volume_type,json=volumeType,proto3" json:"volume_type,omitempty"`
	SizeInG    int32  `protobuf:"varint,2,opt,name=size_in_g,json=sizeInG,proto3" json:"size_in_g,omitempty"`
}

func (x *CloudDiskConf) Reset() {
	*x = CloudDiskConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDiskConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDiskConf) ProtoMessage() {}

func (x *CloudDiskConf) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDiskConf.ProtoReflect.Descriptor instead.
func (*CloudDiskConf) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{0}
}

func (x *CloudDiskConf) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *CloudDiskConf) GetSizeInG() int32 {
	if x != nil {
		return x.SizeInG
	}
	return 0
}

type CloudDiskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	CloudDisk *CloudDiskRes_CloudDisk `protobuf:"bytes,3,opt,name=cloud_disk,json=cloudDisk,proto3" json:"cloud_disk,omitempty"`
}

func (x *CloudDiskRes) Reset() {
	*x = CloudDiskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDiskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDiskRes) ProtoMessage() {}

func (x *CloudDiskRes) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDiskRes.ProtoReflect.Descriptor instead.
func (*CloudDiskRes) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{1}
}

func (x *CloudDiskRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CloudDiskRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CloudDiskRes) GetCloudDisk() *CloudDiskRes_CloudDisk {
	if x != nil {
		return x.CloudDisk
	}
	return nil
}

type CreateCloudDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey           string         `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId         string         `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid   string         `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeName       string         `protobuf:"bytes,4,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	VolumeDesc       string         `protobuf:"bytes,5,opt,name=volume_desc,json=volumeDesc,proto3" json:"volume_desc,omitempty"`
	Region           string         `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string         `protobuf:"bytes,7,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	CloudDiskConf    *CloudDiskConf `protobuf:"bytes,8,opt,name=cloud_disk_conf,json=cloudDiskConf,proto3" json:"cloud_disk_conf,omitempty"`
}

func (x *CreateCloudDiskReq) Reset() {
	*x = CreateCloudDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudDiskReq) ProtoMessage() {}

func (x *CreateCloudDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudDiskReq.ProtoReflect.Descriptor instead.
func (*CreateCloudDiskReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCloudDiskReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *CreateCloudDiskReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateCloudDiskReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *CreateCloudDiskReq) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *CreateCloudDiskReq) GetVolumeDesc() string {
	if x != nil {
		return x.VolumeDesc
	}
	return ""
}

func (x *CreateCloudDiskReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudDiskReq) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CreateCloudDiskReq) GetCloudDiskConf() *CloudDiskConf {
	if x != nil {
		return x.CloudDiskConf
	}
	return nil
}

type GetCloudDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeId       string `protobuf:"bytes,4,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *GetCloudDiskReq) Reset() {
	*x = GetCloudDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudDiskReq) ProtoMessage() {}

func (x *GetCloudDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudDiskReq.ProtoReflect.Descriptor instead.
func (*GetCloudDiskReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{3}
}

func (x *GetCloudDiskReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *GetCloudDiskReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetCloudDiskReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *GetCloudDiskReq) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type ReqizeCloudDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string         `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string         `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string         `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeId       string         `protobuf:"bytes,4,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	CloudDiskConf  *CloudDiskConf `protobuf:"bytes,5,opt,name=cloud_disk_conf,json=cloudDiskConf,proto3" json:"cloud_disk_conf,omitempty"`
}

func (x *ReqizeCloudDiskReq) Reset() {
	*x = ReqizeCloudDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqizeCloudDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqizeCloudDiskReq) ProtoMessage() {}

func (x *ReqizeCloudDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqizeCloudDiskReq.ProtoReflect.Descriptor instead.
func (*ReqizeCloudDiskReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{4}
}

func (x *ReqizeCloudDiskReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *ReqizeCloudDiskReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ReqizeCloudDiskReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *ReqizeCloudDiskReq) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ReqizeCloudDiskReq) GetCloudDiskConf() *CloudDiskConf {
	if x != nil {
		return x.CloudDiskConf
	}
	return nil
}

type ModifyCloudDiskInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeId       string `protobuf:"bytes,4,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	VolumeName     string `protobuf:"bytes,5,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	VolumeDesc     string `protobuf:"bytes,6,opt,name=volume_desc,json=volumeDesc,proto3" json:"volume_desc,omitempty"`
}

func (x *ModifyCloudDiskInfoReq) Reset() {
	*x = ModifyCloudDiskInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCloudDiskInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCloudDiskInfoReq) ProtoMessage() {}

func (x *ModifyCloudDiskInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCloudDiskInfoReq.ProtoReflect.Descriptor instead.
func (*ModifyCloudDiskInfoReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyCloudDiskInfoReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *ModifyCloudDiskInfoReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ModifyCloudDiskInfoReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *ModifyCloudDiskInfoReq) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ModifyCloudDiskInfoReq) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *ModifyCloudDiskInfoReq) GetVolumeDesc() string {
	if x != nil {
		return x.VolumeDesc
	}
	return ""
}

type OperateCloudDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeId       string `protobuf:"bytes,4,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	InstanceId     string `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	OpsType        string `protobuf:"bytes,6,opt,name=ops_type,json=opsType,proto3" json:"ops_type,omitempty"` //attach or detach
}

func (x *OperateCloudDiskReq) Reset() {
	*x = OperateCloudDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateCloudDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateCloudDiskReq) ProtoMessage() {}

func (x *OperateCloudDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateCloudDiskReq.ProtoReflect.Descriptor instead.
func (*OperateCloudDiskReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{6}
}

func (x *OperateCloudDiskReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *OperateCloudDiskReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OperateCloudDiskReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *OperateCloudDiskReq) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *OperateCloudDiskReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OperateCloudDiskReq) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

type DeleteCloudDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	VolumeId       string `protobuf:"bytes,4,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *DeleteCloudDiskReq) Reset() {
	*x = DeleteCloudDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudDiskReq) ProtoMessage() {}

func (x *DeleteCloudDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudDiskReq.ProtoReflect.Descriptor instead.
func (*DeleteCloudDiskReq) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCloudDiskReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *DeleteCloudDiskReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteCloudDiskReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *DeleteCloudDiskReq) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type DeleteCloudDiskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg         string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	VolumeId    string `protobuf:"bytes,3,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	DeletedTime string `protobuf:"bytes,4,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`
}

func (x *DeleteCloudDiskRes) Reset() {
	*x = DeleteCloudDiskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudDiskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudDiskRes) ProtoMessage() {}

func (x *DeleteCloudDiskRes) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudDiskRes.ProtoReflect.Descriptor instead.
func (*DeleteCloudDiskRes) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCloudDiskRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCloudDiskRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteCloudDiskRes) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *DeleteCloudDiskRes) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

type CloudDiskRes_CloudDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId             string         `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	VolumeName           string         `protobuf:"bytes,2,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	VolumeDesc           string         `protobuf:"bytes,3,opt,name=volume_desc,json=volumeDesc,proto3" json:"volume_desc,omitempty"`
	Region               string         `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone     string         `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	CloudDiskConf        *CloudDiskConf `protobuf:"bytes,6,opt,name=cloud_disk_conf,json=cloudDiskConf,proto3" json:"cloud_disk_conf,omitempty"`
	VolumeStatus         string         `protobuf:"bytes,7,opt,name=volume_status,json=volumeStatus,proto3" json:"volume_status,omitempty"`
	CreatedTime          string         `protobuf:"bytes,8,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime          string         `protobuf:"bytes,9,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	AttachInstanceId     string         `protobuf:"bytes,10,opt,name=attach_instance_id,json=attachInstanceId,proto3" json:"attach_instance_id,omitempty"`
	AttachInstanceDevice string         `protobuf:"bytes,11,opt,name=attach_instance_device,json=attachInstanceDevice,proto3" json:"attach_instance_device,omitempty"`
	AttachedTime         string         `protobuf:"bytes,12,opt,name=attached_time,json=attachedTime,proto3" json:"attached_time,omitempty"`
}

func (x *CloudDiskRes_CloudDisk) Reset() {
	*x = CloudDiskRes_CloudDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDiskRes_CloudDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDiskRes_CloudDisk) ProtoMessage() {}

func (x *CloudDiskRes_CloudDisk) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDiskRes_CloudDisk.ProtoReflect.Descriptor instead.
func (*CloudDiskRes_CloudDisk) Descriptor() ([]byte, []int) {
	return file_cloud_disk_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CloudDiskRes_CloudDisk) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetVolumeDesc() string {
	if x != nil {
		return x.VolumeDesc
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetCloudDiskConf() *CloudDiskConf {
	if x != nil {
		return x.CloudDiskConf
	}
	return nil
}

func (x *CloudDiskRes_CloudDisk) GetVolumeStatus() string {
	if x != nil {
		return x.VolumeStatus
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetAttachInstanceId() string {
	if x != nil {
		return x.AttachInstanceId
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetAttachInstanceDevice() string {
	if x != nil {
		return x.AttachInstanceDevice
	}
	return ""
}

func (x *CloudDiskRes_CloudDisk) GetAttachedTime() string {
	if x != nil {
		return x.AttachedTime
	}
	return ""
}

var File_cloud_disk_proto protoreflect.FileDescriptor

var file_cloud_disk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x4c, 0x0a,
	0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x22, 0xde, 0x04, 0x0a, 0x0c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69,
	0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x1a, 0xe5, 0x03, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x02, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x69, 0x7a, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0xd5, 0x01,
	0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0xde, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x69, 0x7a,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x69, 0x7a, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_disk_proto_rawDescOnce sync.Once
	file_cloud_disk_proto_rawDescData = file_cloud_disk_proto_rawDesc
)

func file_cloud_disk_proto_rawDescGZIP() []byte {
	file_cloud_disk_proto_rawDescOnce.Do(func() {
		file_cloud_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_proto_rawDescData)
	})
	return file_cloud_disk_proto_rawDescData
}

var file_cloud_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cloud_disk_proto_goTypes = []interface{}{
	(*CloudDiskConf)(nil),          // 0: clouddisk.CloudDiskConf
	(*CloudDiskRes)(nil),           // 1: clouddisk.CloudDiskRes
	(*CreateCloudDiskReq)(nil),     // 2: clouddisk.CreateCloudDiskReq
	(*GetCloudDiskReq)(nil),        // 3: clouddisk.GetCloudDiskReq
	(*ReqizeCloudDiskReq)(nil),     // 4: clouddisk.ReqizeCloudDiskReq
	(*ModifyCloudDiskInfoReq)(nil), // 5: clouddisk.ModifyCloudDiskInfoReq
	(*OperateCloudDiskReq)(nil),    // 6: clouddisk.OperateCloudDiskReq
	(*DeleteCloudDiskReq)(nil),     // 7: clouddisk.DeleteCloudDiskReq
	(*DeleteCloudDiskRes)(nil),     // 8: clouddisk.DeleteCloudDiskRes
	(*CloudDiskRes_CloudDisk)(nil), // 9: clouddisk.CloudDiskRes.CloudDisk
}
var file_cloud_disk_proto_depIdxs = []int32{
	9,  // 0: clouddisk.CloudDiskRes.cloud_disk:type_name -> clouddisk.CloudDiskRes.CloudDisk
	0,  // 1: clouddisk.CreateCloudDiskReq.cloud_disk_conf:type_name -> clouddisk.CloudDiskConf
	0,  // 2: clouddisk.ReqizeCloudDiskReq.cloud_disk_conf:type_name -> clouddisk.CloudDiskConf
	0,  // 3: clouddisk.CloudDiskRes.CloudDisk.cloud_disk_conf:type_name -> clouddisk.CloudDiskConf
	2,  // 4: clouddisk.CloudDiskService.CreateCloudDisk:input_type -> clouddisk.CreateCloudDiskReq
	3,  // 5: clouddisk.CloudDiskService.GetCloudDisk:input_type -> clouddisk.GetCloudDiskReq
	4,  // 6: clouddisk.CloudDiskService.ReqizeCloudDisk:input_type -> clouddisk.ReqizeCloudDiskReq
	5,  // 7: clouddisk.CloudDiskService.ModifyCloudDiskInfo:input_type -> clouddisk.ModifyCloudDiskInfoReq
	6,  // 8: clouddisk.CloudDiskService.OperateCloudDisk:input_type -> clouddisk.OperateCloudDiskReq
	7,  // 9: clouddisk.CloudDiskService.DeleteCloudDisk:input_type -> clouddisk.DeleteCloudDiskReq
	1,  // 10: clouddisk.CloudDiskService.CreateCloudDisk:output_type -> clouddisk.CloudDiskRes
	1,  // 11: clouddisk.CloudDiskService.GetCloudDisk:output_type -> clouddisk.CloudDiskRes
	1,  // 12: clouddisk.CloudDiskService.ReqizeCloudDisk:output_type -> clouddisk.CloudDiskRes
	1,  // 13: clouddisk.CloudDiskService.ModifyCloudDiskInfo:output_type -> clouddisk.CloudDiskRes
	1,  // 14: clouddisk.CloudDiskService.OperateCloudDisk:output_type -> clouddisk.CloudDiskRes
	8,  // 15: clouddisk.CloudDiskService.DeleteCloudDisk:output_type -> clouddisk.DeleteCloudDiskRes
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cloud_disk_proto_init() }
func file_cloud_disk_proto_init() {
	if File_cloud_disk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDiskConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDiskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqizeCloudDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCloudDiskInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateCloudDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudDiskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDiskRes_CloudDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_disk_proto_goTypes,
		DependencyIndexes: file_cloud_disk_proto_depIdxs,
		MessageInfos:      file_cloud_disk_proto_msgTypes,
	}.Build()
	File_cloud_disk_proto = out.File
	file_cloud_disk_proto_rawDesc = nil
	file_cloud_disk_proto_goTypes = nil
	file_cloud_disk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudDiskServiceClient is the client API for CloudDiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudDiskServiceClient interface {
	//创建云硬盘
	CreateCloudDisk(ctx context.Context, in *CreateCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error)
	//获取云硬盘信息
	GetCloudDisk(ctx context.Context, in *GetCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error)
	//云硬盘扩容
	ReqizeCloudDisk(ctx context.Context, in *ReqizeCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error)
	//修改云硬盘信息
	ModifyCloudDiskInfo(ctx context.Context, in *ModifyCloudDiskInfoReq, opts ...grpc.CallOption) (*CloudDiskRes, error)
	//云主机挂载/卸载云硬盘
	OperateCloudDisk(ctx context.Context, in *OperateCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error)
	//删除云硬盘
	DeleteCloudDisk(ctx context.Context, in *DeleteCloudDiskReq, opts ...grpc.CallOption) (*DeleteCloudDiskRes, error)
}

type cloudDiskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDiskServiceClient(cc grpc.ClientConnInterface) CloudDiskServiceClient {
	return &cloudDiskServiceClient{cc}
}

func (c *cloudDiskServiceClient) CreateCloudDisk(ctx context.Context, in *CreateCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error) {
	out := new(CloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/CreateCloudDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskServiceClient) GetCloudDisk(ctx context.Context, in *GetCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error) {
	out := new(CloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/GetCloudDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskServiceClient) ReqizeCloudDisk(ctx context.Context, in *ReqizeCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error) {
	out := new(CloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/ReqizeCloudDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskServiceClient) ModifyCloudDiskInfo(ctx context.Context, in *ModifyCloudDiskInfoReq, opts ...grpc.CallOption) (*CloudDiskRes, error) {
	out := new(CloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/ModifyCloudDiskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskServiceClient) OperateCloudDisk(ctx context.Context, in *OperateCloudDiskReq, opts ...grpc.CallOption) (*CloudDiskRes, error) {
	out := new(CloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/OperateCloudDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskServiceClient) DeleteCloudDisk(ctx context.Context, in *DeleteCloudDiskReq, opts ...grpc.CallOption) (*DeleteCloudDiskRes, error) {
	out := new(DeleteCloudDiskRes)
	err := c.cc.Invoke(ctx, "/clouddisk.CloudDiskService/DeleteCloudDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDiskServiceServer is the server API for CloudDiskService service.
type CloudDiskServiceServer interface {
	//创建云硬盘
	CreateCloudDisk(context.Context, *CreateCloudDiskReq) (*CloudDiskRes, error)
	//获取云硬盘信息
	GetCloudDisk(context.Context, *GetCloudDiskReq) (*CloudDiskRes, error)
	//云硬盘扩容
	ReqizeCloudDisk(context.Context, *ReqizeCloudDiskReq) (*CloudDiskRes, error)
	//修改云硬盘信息
	ModifyCloudDiskInfo(context.Context, *ModifyCloudDiskInfoReq) (*CloudDiskRes, error)
	//云主机挂载/卸载云硬盘
	OperateCloudDisk(context.Context, *OperateCloudDiskReq) (*CloudDiskRes, error)
	//删除云硬盘
	DeleteCloudDisk(context.Context, *DeleteCloudDiskReq) (*DeleteCloudDiskRes, error)
}

// UnimplementedCloudDiskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudDiskServiceServer struct {
}

func (*UnimplementedCloudDiskServiceServer) CreateCloudDisk(context.Context, *CreateCloudDiskReq) (*CloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudDisk not implemented")
}
func (*UnimplementedCloudDiskServiceServer) GetCloudDisk(context.Context, *GetCloudDiskReq) (*CloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDisk not implemented")
}
func (*UnimplementedCloudDiskServiceServer) ReqizeCloudDisk(context.Context, *ReqizeCloudDiskReq) (*CloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqizeCloudDisk not implemented")
}
func (*UnimplementedCloudDiskServiceServer) ModifyCloudDiskInfo(context.Context, *ModifyCloudDiskInfoReq) (*CloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCloudDiskInfo not implemented")
}
func (*UnimplementedCloudDiskServiceServer) OperateCloudDisk(context.Context, *OperateCloudDiskReq) (*CloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateCloudDisk not implemented")
}
func (*UnimplementedCloudDiskServiceServer) DeleteCloudDisk(context.Context, *DeleteCloudDiskReq) (*DeleteCloudDiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudDisk not implemented")
}

func RegisterCloudDiskServiceServer(s *grpc.Server, srv CloudDiskServiceServer) {
	s.RegisterService(&_CloudDiskService_serviceDesc, srv)
}

func _CloudDiskService_CreateCloudDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).CreateCloudDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/CreateCloudDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).CreateCloudDisk(ctx, req.(*CreateCloudDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDiskService_GetCloudDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).GetCloudDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/GetCloudDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).GetCloudDisk(ctx, req.(*GetCloudDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDiskService_ReqizeCloudDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqizeCloudDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).ReqizeCloudDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/ReqizeCloudDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).ReqizeCloudDisk(ctx, req.(*ReqizeCloudDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDiskService_ModifyCloudDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCloudDiskInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).ModifyCloudDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/ModifyCloudDiskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).ModifyCloudDiskInfo(ctx, req.(*ModifyCloudDiskInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDiskService_OperateCloudDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateCloudDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).OperateCloudDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/OperateCloudDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).OperateCloudDisk(ctx, req.(*OperateCloudDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDiskService_DeleteCloudDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServiceServer).DeleteCloudDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddisk.CloudDiskService/DeleteCloudDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServiceServer).DeleteCloudDisk(ctx, req.(*DeleteCloudDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudDiskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddisk.CloudDiskService",
	HandlerType: (*CloudDiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudDisk",
			Handler:    _CloudDiskService_CreateCloudDisk_Handler,
		},
		{
			MethodName: "GetCloudDisk",
			Handler:    _CloudDiskService_GetCloudDisk_Handler,
		},
		{
			MethodName: "ReqizeCloudDisk",
			Handler:    _CloudDiskService_ReqizeCloudDisk_Handler,
		},
		{
			MethodName: "ModifyCloudDiskInfo",
			Handler:    _CloudDiskService_ModifyCloudDiskInfo_Handler,
		},
		{
			MethodName: "OperateCloudDisk",
			Handler:    _CloudDiskService_OperateCloudDisk_Handler,
		},
		{
			MethodName: "DeleteCloudDisk",
			Handler:    _CloudDiskService_DeleteCloudDisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud_disk.proto",
}

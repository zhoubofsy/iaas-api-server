// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: firewall.proto

// 指定文件生成出来的package

package firewall

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleId       string `protobuf:"bytes,1,opt,name=firewall_rule_id,json=firewallRuleId,proto3" json:"firewall_rule_id,omitempty"`
	FirewallRuleName     string `protobuf:"bytes,2,opt,name=firewall_rule_name,json=firewallRuleName,proto3" json:"firewall_rule_name,omitempty"`
	FirewallRuleDesc     string `protobuf:"bytes,3,opt,name=firewall_rule_desc,json=firewallRuleDesc,proto3" json:"firewall_rule_desc,omitempty"`
	FirewallRuleAction   string `protobuf:"bytes,4,opt,name=firewall_rule_action,json=firewallRuleAction,proto3" json:"firewall_rule_action,omitempty"`
	FirewallRuleProtocol string `protobuf:"bytes,5,opt,name=firewall_rule_protocol,json=firewallRuleProtocol,proto3" json:"firewall_rule_protocol,omitempty"`
	FirewallRuleSrcIp    string `protobuf:"bytes,6,opt,name=firewall_rule_src_ip,json=firewallRuleSrcIp,proto3" json:"firewall_rule_src_ip,omitempty"`
	FirewallRuleSrcPort  string `protobuf:"bytes,7,opt,name=firewall_rule_src_port,json=firewallRuleSrcPort,proto3" json:"firewall_rule_src_port,omitempty"`
	FirewallRuleDstIp    string `protobuf:"bytes,8,opt,name=firewall_rule_dst_ip,json=firewallRuleDstIp,proto3" json:"firewall_rule_dst_ip,omitempty"`
	FirewallRuleDstPort  string `protobuf:"bytes,9,opt,name=firewall_rule_dst_port,json=firewallRuleDstPort,proto3" json:"firewall_rule_dst_port,omitempty"`
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{0}
}

func (x *FirewallRule) GetFirewallRuleId() string {
	if x != nil {
		return x.FirewallRuleId
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleName() string {
	if x != nil {
		return x.FirewallRuleName
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleDesc() string {
	if x != nil {
		return x.FirewallRuleDesc
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleAction() string {
	if x != nil {
		return x.FirewallRuleAction
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleProtocol() string {
	if x != nil {
		return x.FirewallRuleProtocol
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleSrcIp() string {
	if x != nil {
		return x.FirewallRuleSrcIp
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleSrcPort() string {
	if x != nil {
		return x.FirewallRuleSrcPort
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleDstIp() string {
	if x != nil {
		return x.FirewallRuleDstIp
	}
	return ""
}

func (x *FirewallRule) GetFirewallRuleDstPort() string {
	if x != nil {
		return x.FirewallRuleDstPort
	}
	return ""
}

type FirewallPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallPolicyId    string          `protobuf:"bytes,1,opt,name=firewall_policy_id,json=firewallPolicyId,proto3" json:"firewall_policy_id,omitempty"`
	FirewallPolicyName  string          `protobuf:"bytes,2,opt,name=firewall_policy_name,json=firewallPolicyName,proto3" json:"firewall_policy_name,omitempty"`
	FirewallPolicyDesc  string          `protobuf:"bytes,3,opt,name=firewall_policy_desc,json=firewallPolicyDesc,proto3" json:"firewall_policy_desc,omitempty"`
	FirewallPolicyRules []*FirewallRule `protobuf:"bytes,4,rep,name=firewall_policy_rules,json=firewallPolicyRules,proto3" json:"firewall_policy_rules,omitempty"`
}

func (x *FirewallPolicy) Reset() {
	*x = FirewallPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallPolicy) ProtoMessage() {}

func (x *FirewallPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallPolicy.ProtoReflect.Descriptor instead.
func (*FirewallPolicy) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{1}
}

func (x *FirewallPolicy) GetFirewallPolicyId() string {
	if x != nil {
		return x.FirewallPolicyId
	}
	return ""
}

func (x *FirewallPolicy) GetFirewallPolicyName() string {
	if x != nil {
		return x.FirewallPolicyName
	}
	return ""
}

func (x *FirewallPolicy) GetFirewallPolicyDesc() string {
	if x != nil {
		return x.FirewallPolicyDesc
	}
	return ""
}

func (x *FirewallPolicy) GetFirewallPolicyRules() []*FirewallRule {
	if x != nil {
		return x.FirewallPolicyRules
	}
	return nil
}

//openstack原生支持一个firewall group对多个ports，本api限定firewall group与port为一一对应关系，故firewall_attached_port_id为单个string
type Firewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallId             string          `protobuf:"bytes,1,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
	FirewallName           string          `protobuf:"bytes,2,opt,name=firewall_name,json=firewallName,proto3" json:"firewall_name,omitempty"`
	FirewallDesc           string          `protobuf:"bytes,3,opt,name=firewall_desc,json=firewallDesc,proto3" json:"firewall_desc,omitempty"`
	FirewallAttachedPortId string          `protobuf:"bytes,4,opt,name=firewall_attached_port_id,json=firewallAttachedPortId,proto3" json:"firewall_attached_port_id,omitempty"`
	FirewallStatus         string          `protobuf:"bytes,5,opt,name=firewall_status,json=firewallStatus,proto3" json:"firewall_status,omitempty"`
	FirewallIngressPolicy  *FirewallPolicy `protobuf:"bytes,6,opt,name=firewall_ingress_policy,json=firewallIngressPolicy,proto3" json:"firewall_ingress_policy,omitempty"`
	FirewallEgressPolicy   *FirewallPolicy `protobuf:"bytes,7,opt,name=firewall_egress_policy,json=firewallEgressPolicy,proto3" json:"firewall_egress_policy,omitempty"`
	CreatedTime            string          `protobuf:"bytes,8,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime            string          `protobuf:"bytes,9,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{2}
}

func (x *Firewall) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

func (x *Firewall) GetFirewallName() string {
	if x != nil {
		return x.FirewallName
	}
	return ""
}

func (x *Firewall) GetFirewallDesc() string {
	if x != nil {
		return x.FirewallDesc
	}
	return ""
}

func (x *Firewall) GetFirewallAttachedPortId() string {
	if x != nil {
		return x.FirewallAttachedPortId
	}
	return ""
}

func (x *Firewall) GetFirewallStatus() string {
	if x != nil {
		return x.FirewallStatus
	}
	return ""
}

func (x *Firewall) GetFirewallIngressPolicy() *FirewallPolicy {
	if x != nil {
		return x.FirewallIngressPolicy
	}
	return nil
}

func (x *Firewall) GetFirewallEgressPolicy() *FirewallPolicy {
	if x != nil {
		return x.FirewallEgressPolicy
	}
	return nil
}

func (x *Firewall) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Firewall) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

type FirewallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Firewall *Firewall `protobuf:"bytes,3,opt,name=firewall,proto3" json:"firewall,omitempty"`
}

func (x *FirewallRes) Reset() {
	*x = FirewallRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRes) ProtoMessage() {}

func (x *FirewallRes) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRes.ProtoReflect.Descriptor instead.
func (*FirewallRes) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{3}
}

func (x *FirewallRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FirewallRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FirewallRes) GetFirewall() *Firewall {
	if x != nil {
		return x.Firewall
	}
	return nil
}

type FirewallRuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleDesc     string `protobuf:"bytes,1,opt,name=firewall_rule_desc,json=firewallRuleDesc,proto3" json:"firewall_rule_desc,omitempty"`
	FirewallRuleAction   string `protobuf:"bytes,2,opt,name=firewall_rule_action,json=firewallRuleAction,proto3" json:"firewall_rule_action,omitempty"`
	FirewallRuleProtocol string `protobuf:"bytes,3,opt,name=firewall_rule_protocol,json=firewallRuleProtocol,proto3" json:"firewall_rule_protocol,omitempty"`
	FirewallRuleSrcIp    string `protobuf:"bytes,4,opt,name=firewall_rule_src_ip,json=firewallRuleSrcIp,proto3" json:"firewall_rule_src_ip,omitempty"`
	FirewallRuleSrcPort  string `protobuf:"bytes,5,opt,name=firewall_rule_src_port,json=firewallRuleSrcPort,proto3" json:"firewall_rule_src_port,omitempty"`
	FirewallRuleDstIp    string `protobuf:"bytes,6,opt,name=firewall_rule_dst_ip,json=firewallRuleDstIp,proto3" json:"firewall_rule_dst_ip,omitempty"`
	FirewallRuleDstPort  string `protobuf:"bytes,7,opt,name=firewall_rule_dst_port,json=firewallRuleDstPort,proto3" json:"firewall_rule_dst_port,omitempty"`
}

func (x *FirewallRuleSet) Reset() {
	*x = FirewallRuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRuleSet) ProtoMessage() {}

func (x *FirewallRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRuleSet.ProtoReflect.Descriptor instead.
func (*FirewallRuleSet) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{4}
}

func (x *FirewallRuleSet) GetFirewallRuleDesc() string {
	if x != nil {
		return x.FirewallRuleDesc
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleAction() string {
	if x != nil {
		return x.FirewallRuleAction
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleProtocol() string {
	if x != nil {
		return x.FirewallRuleProtocol
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleSrcIp() string {
	if x != nil {
		return x.FirewallRuleSrcIp
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleSrcPort() string {
	if x != nil {
		return x.FirewallRuleSrcPort
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleDstIp() string {
	if x != nil {
		return x.FirewallRuleDstIp
	}
	return ""
}

func (x *FirewallRuleSet) GetFirewallRuleDstPort() string {
	if x != nil {
		return x.FirewallRuleDstPort
	}
	return ""
}

type CreateFirewallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey                     string             `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId                   string             `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid             string             `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FirewallName               string             `protobuf:"bytes,4,opt,name=firewall_name,json=firewallName,proto3" json:"firewall_name,omitempty"`
	FirewallDesc               string             `protobuf:"bytes,5,opt,name=firewall_desc,json=firewallDesc,proto3" json:"firewall_desc,omitempty"`
	FirewallIngressPolicyRules []*FirewallRuleSet `protobuf:"bytes,6,rep,name=firewall_ingress_policy_rules,json=firewallIngressPolicyRules,proto3" json:"firewall_ingress_policy_rules,omitempty"`
	FirewallEgressPolicyRules  []*FirewallRuleSet `protobuf:"bytes,7,rep,name=firewall_egress_policy_rules,json=firewallEgressPolicyRules,proto3" json:"firewall_egress_policy_rules,omitempty"`
}

func (x *CreateFirewallReq) Reset() {
	*x = CreateFirewallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFirewallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFirewallReq) ProtoMessage() {}

func (x *CreateFirewallReq) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFirewallReq.ProtoReflect.Descriptor instead.
func (*CreateFirewallReq) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFirewallReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *CreateFirewallReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateFirewallReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *CreateFirewallReq) GetFirewallName() string {
	if x != nil {
		return x.FirewallName
	}
	return ""
}

func (x *CreateFirewallReq) GetFirewallDesc() string {
	if x != nil {
		return x.FirewallDesc
	}
	return ""
}

func (x *CreateFirewallReq) GetFirewallIngressPolicyRules() []*FirewallRuleSet {
	if x != nil {
		return x.FirewallIngressPolicyRules
	}
	return nil
}

func (x *CreateFirewallReq) GetFirewallEgressPolicyRules() []*FirewallRuleSet {
	if x != nil {
		return x.FirewallEgressPolicyRules
	}
	return nil
}

type GetFirewallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FirewallId     string `protobuf:"bytes,4,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
}

func (x *GetFirewallReq) Reset() {
	*x = GetFirewallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallReq) ProtoMessage() {}

func (x *GetFirewallReq) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallReq.ProtoReflect.Descriptor instead.
func (*GetFirewallReq) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{6}
}

func (x *GetFirewallReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *GetFirewallReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetFirewallReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *GetFirewallReq) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

type UpdateFirewallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey                     string             `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId                   string             `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid             string             `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FirewallId                 string             `protobuf:"bytes,4,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
	FirewallName               string             `protobuf:"bytes,5,opt,name=firewall_name,json=firewallName,proto3" json:"firewall_name,omitempty"`
	FirewallDesc               string             `protobuf:"bytes,6,opt,name=firewall_desc,json=firewallDesc,proto3" json:"firewall_desc,omitempty"`
	FirewallIngressPolicyRules []*FirewallRuleSet `protobuf:"bytes,7,rep,name=firewall_ingress_policy_rules,json=firewallIngressPolicyRules,proto3" json:"firewall_ingress_policy_rules,omitempty"`
	FirewallEgressPolicyRules  []*FirewallRuleSet `protobuf:"bytes,8,rep,name=firewall_egress_policy_rules,json=firewallEgressPolicyRules,proto3" json:"firewall_egress_policy_rules,omitempty"`
}

func (x *UpdateFirewallReq) Reset() {
	*x = UpdateFirewallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirewallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirewallReq) ProtoMessage() {}

func (x *UpdateFirewallReq) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirewallReq.ProtoReflect.Descriptor instead.
func (*UpdateFirewallReq) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFirewallReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *UpdateFirewallReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateFirewallReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *UpdateFirewallReq) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

func (x *UpdateFirewallReq) GetFirewallName() string {
	if x != nil {
		return x.FirewallName
	}
	return ""
}

func (x *UpdateFirewallReq) GetFirewallDesc() string {
	if x != nil {
		return x.FirewallDesc
	}
	return ""
}

func (x *UpdateFirewallReq) GetFirewallIngressPolicyRules() []*FirewallRuleSet {
	if x != nil {
		return x.FirewallIngressPolicyRules
	}
	return nil
}

func (x *UpdateFirewallReq) GetFirewallEgressPolicyRules() []*FirewallRuleSet {
	if x != nil {
		return x.FirewallEgressPolicyRules
	}
	return nil
}

type DeleteFirewallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FirewallId     string `protobuf:"bytes,4,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
}

func (x *DeleteFirewallReq) Reset() {
	*x = DeleteFirewallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallReq) ProtoMessage() {}

func (x *DeleteFirewallReq) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallReq.ProtoReflect.Descriptor instead.
func (*DeleteFirewallReq) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFirewallReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *DeleteFirewallReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteFirewallReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *DeleteFirewallReq) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

type DeleteFirewallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg         string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	FirewallId  string `protobuf:"bytes,3,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
	DeletedTime string `protobuf:"bytes,4,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`
}

func (x *DeleteFirewallRes) Reset() {
	*x = DeleteFirewallRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRes) ProtoMessage() {}

func (x *DeleteFirewallRes) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRes.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRes) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFirewallRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteFirewallRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteFirewallRes) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

func (x *DeleteFirewallRes) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

type OperateFirewallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey         string `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PlatformUserid string `protobuf:"bytes,3,opt,name=platform_userid,json=platformUserid,proto3" json:"platform_userid,omitempty"`
	FirewallId     string `protobuf:"bytes,4,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
	PortId         string `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	OpsType        string `protobuf:"bytes,6,opt,name=ops_type,json=opsType,proto3" json:"ops_type,omitempty"` //attach or detach
}

func (x *OperateFirewallReq) Reset() {
	*x = OperateFirewallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateFirewallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateFirewallReq) ProtoMessage() {}

func (x *OperateFirewallReq) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateFirewallReq.ProtoReflect.Descriptor instead.
func (*OperateFirewallReq) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{10}
}

func (x *OperateFirewallReq) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *OperateFirewallReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OperateFirewallReq) GetPlatformUserid() string {
	if x != nil {
		return x.PlatformUserid
	}
	return ""
}

func (x *OperateFirewallReq) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

func (x *OperateFirewallReq) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *OperateFirewallReq) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

type OperateFirewallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	FirewallId             string `protobuf:"bytes,3,opt,name=firewall_id,json=firewallId,proto3" json:"firewall_id,omitempty"`
	FirewallAttachedPortId string `protobuf:"bytes,4,opt,name=firewall_attached_port_id,json=firewallAttachedPortId,proto3" json:"firewall_attached_port_id,omitempty"`
	OpsType                string `protobuf:"bytes,5,opt,name=ops_type,json=opsType,proto3" json:"ops_type,omitempty"`
	OperatedTime           string `protobuf:"bytes,6,opt,name=operated_time,json=operatedTime,proto3" json:"operated_time,omitempty"`
}

func (x *OperateFirewallRes) Reset() {
	*x = OperateFirewallRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firewall_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateFirewallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateFirewallRes) ProtoMessage() {}

func (x *OperateFirewallRes) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateFirewallRes.ProtoReflect.Descriptor instead.
func (*OperateFirewallRes) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{11}
}

func (x *OperateFirewallRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OperateFirewallRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *OperateFirewallRes) GetFirewallId() string {
	if x != nil {
		return x.FirewallId
	}
	return ""
}

func (x *OperateFirewallRes) GetFirewallAttachedPortId() string {
	if x != nil {
		return x.FirewallAttachedPortId
	}
	return ""
}

func (x *OperateFirewallRes) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

func (x *OperateFirewallRes) GetOperatedTime() string {
	if x != nil {
		return x.OperatedTime
	}
	return ""
}

var File_firewall_proto protoreflect.FileDescriptor

var file_firewall_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x22, 0xc8, 0x03, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x73, 0x74, 0x49, 0x70,
	0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x4a, 0x0a, 0x15, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x39,
	0x0a, 0x19, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x50, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0b, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x2e, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x22,
	0xf3, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x73, 0x74, 0x49, 0x70,
	0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x5c, 0x0a, 0x1d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x19, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0x96, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x5c,
	0x0a, 0x1d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x1a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1c,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x19, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x7d, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a,
	0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0xf8, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x12, 0x1b, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x1c,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_firewall_proto_rawDescOnce sync.Once
	file_firewall_proto_rawDescData = file_firewall_proto_rawDesc
)

func file_firewall_proto_rawDescGZIP() []byte {
	file_firewall_proto_rawDescOnce.Do(func() {
		file_firewall_proto_rawDescData = protoimpl.X.CompressGZIP(file_firewall_proto_rawDescData)
	})
	return file_firewall_proto_rawDescData
}

var file_firewall_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_firewall_proto_goTypes = []interface{}{
	(*FirewallRule)(nil),       // 0: firewall.FirewallRule
	(*FirewallPolicy)(nil),     // 1: firewall.FirewallPolicy
	(*Firewall)(nil),           // 2: firewall.Firewall
	(*FirewallRes)(nil),        // 3: firewall.FirewallRes
	(*FirewallRuleSet)(nil),    // 4: firewall.FirewallRuleSet
	(*CreateFirewallReq)(nil),  // 5: firewall.CreateFirewallReq
	(*GetFirewallReq)(nil),     // 6: firewall.GetFirewallReq
	(*UpdateFirewallReq)(nil),  // 7: firewall.UpdateFirewallReq
	(*DeleteFirewallReq)(nil),  // 8: firewall.DeleteFirewallReq
	(*DeleteFirewallRes)(nil),  // 9: firewall.DeleteFirewallRes
	(*OperateFirewallReq)(nil), // 10: firewall.OperateFirewallReq
	(*OperateFirewallRes)(nil), // 11: firewall.OperateFirewallRes
}
var file_firewall_proto_depIdxs = []int32{
	0,  // 0: firewall.FirewallPolicy.firewall_policy_rules:type_name -> firewall.FirewallRule
	1,  // 1: firewall.Firewall.firewall_ingress_policy:type_name -> firewall.FirewallPolicy
	1,  // 2: firewall.Firewall.firewall_egress_policy:type_name -> firewall.FirewallPolicy
	2,  // 3: firewall.FirewallRes.firewall:type_name -> firewall.Firewall
	4,  // 4: firewall.CreateFirewallReq.firewall_ingress_policy_rules:type_name -> firewall.FirewallRuleSet
	4,  // 5: firewall.CreateFirewallReq.firewall_egress_policy_rules:type_name -> firewall.FirewallRuleSet
	4,  // 6: firewall.UpdateFirewallReq.firewall_ingress_policy_rules:type_name -> firewall.FirewallRuleSet
	4,  // 7: firewall.UpdateFirewallReq.firewall_egress_policy_rules:type_name -> firewall.FirewallRuleSet
	5,  // 8: firewall.FirewallService.CreateFirewall:input_type -> firewall.CreateFirewallReq
	6,  // 9: firewall.FirewallService.GetFirewall:input_type -> firewall.GetFirewallReq
	7,  // 10: firewall.FirewallService.UpdateFirewall:input_type -> firewall.UpdateFirewallReq
	8,  // 11: firewall.FirewallService.DeleteFirewall:input_type -> firewall.DeleteFirewallReq
	10, // 12: firewall.FirewallService.OperateFirewall:input_type -> firewall.OperateFirewallReq
	3,  // 13: firewall.FirewallService.CreateFirewall:output_type -> firewall.FirewallRes
	3,  // 14: firewall.FirewallService.GetFirewall:output_type -> firewall.FirewallRes
	3,  // 15: firewall.FirewallService.UpdateFirewall:output_type -> firewall.FirewallRes
	9,  // 16: firewall.FirewallService.DeleteFirewall:output_type -> firewall.DeleteFirewallRes
	11, // 17: firewall.FirewallService.OperateFirewall:output_type -> firewall.OperateFirewallRes
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_firewall_proto_init() }
func file_firewall_proto_init() {
	if File_firewall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_firewall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firewall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFirewallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirewallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateFirewallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firewall_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateFirewallRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_firewall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_firewall_proto_goTypes,
		DependencyIndexes: file_firewall_proto_depIdxs,
		MessageInfos:      file_firewall_proto_msgTypes,
	}.Build()
	File_firewall_proto = out.File
	file_firewall_proto_rawDesc = nil
	file_firewall_proto_goTypes = nil
	file_firewall_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FirewallServiceClient is the client API for FirewallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FirewallServiceClient interface {
	//创建防火墙
	CreateFirewall(ctx context.Context, in *CreateFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error)
	//获取防火墙信息
	GetFirewall(ctx context.Context, in *GetFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error)
	//修改防火墙
	UpdateFirewall(ctx context.Context, in *UpdateFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error)
	//删除防火墙
	DeleteFirewall(ctx context.Context, in *DeleteFirewallReq, opts ...grpc.CallOption) (*DeleteFirewallRes, error)
	//防火墙绑定/取消绑定路由器接口
	OperateFirewall(ctx context.Context, in *OperateFirewallReq, opts ...grpc.CallOption) (*OperateFirewallRes, error)
}

type firewallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallServiceClient(cc grpc.ClientConnInterface) FirewallServiceClient {
	return &firewallServiceClient{cc}
}

func (c *firewallServiceClient) CreateFirewall(ctx context.Context, in *CreateFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error) {
	out := new(FirewallRes)
	err := c.cc.Invoke(ctx, "/firewall.FirewallService/CreateFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) GetFirewall(ctx context.Context, in *GetFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error) {
	out := new(FirewallRes)
	err := c.cc.Invoke(ctx, "/firewall.FirewallService/GetFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) UpdateFirewall(ctx context.Context, in *UpdateFirewallReq, opts ...grpc.CallOption) (*FirewallRes, error) {
	out := new(FirewallRes)
	err := c.cc.Invoke(ctx, "/firewall.FirewallService/UpdateFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) DeleteFirewall(ctx context.Context, in *DeleteFirewallReq, opts ...grpc.CallOption) (*DeleteFirewallRes, error) {
	out := new(DeleteFirewallRes)
	err := c.cc.Invoke(ctx, "/firewall.FirewallService/DeleteFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) OperateFirewall(ctx context.Context, in *OperateFirewallReq, opts ...grpc.CallOption) (*OperateFirewallRes, error) {
	out := new(OperateFirewallRes)
	err := c.cc.Invoke(ctx, "/firewall.FirewallService/OperateFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirewallServiceServer is the server API for FirewallService service.
type FirewallServiceServer interface {
	//创建防火墙
	CreateFirewall(context.Context, *CreateFirewallReq) (*FirewallRes, error)
	//获取防火墙信息
	GetFirewall(context.Context, *GetFirewallReq) (*FirewallRes, error)
	//修改防火墙
	UpdateFirewall(context.Context, *UpdateFirewallReq) (*FirewallRes, error)
	//删除防火墙
	DeleteFirewall(context.Context, *DeleteFirewallReq) (*DeleteFirewallRes, error)
	//防火墙绑定/取消绑定路由器接口
	OperateFirewall(context.Context, *OperateFirewallReq) (*OperateFirewallRes, error)
}

// UnimplementedFirewallServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFirewallServiceServer struct {
}

func (*UnimplementedFirewallServiceServer) CreateFirewall(context.Context, *CreateFirewallReq) (*FirewallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirewall not implemented")
}
func (*UnimplementedFirewallServiceServer) GetFirewall(context.Context, *GetFirewallReq) (*FirewallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewall not implemented")
}
func (*UnimplementedFirewallServiceServer) UpdateFirewall(context.Context, *UpdateFirewallReq) (*FirewallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirewall not implemented")
}
func (*UnimplementedFirewallServiceServer) DeleteFirewall(context.Context, *DeleteFirewallReq) (*DeleteFirewallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewall not implemented")
}
func (*UnimplementedFirewallServiceServer) OperateFirewall(context.Context, *OperateFirewallReq) (*OperateFirewallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateFirewall not implemented")
}

func RegisterFirewallServiceServer(s *grpc.Server, srv FirewallServiceServer) {
	s.RegisterService(&_FirewallService_serviceDesc, srv)
}

func _FirewallService_CreateFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirewallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).CreateFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallService/CreateFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).CreateFirewall(ctx, req.(*CreateFirewallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_GetFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirewallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).GetFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallService/GetFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).GetFirewall(ctx, req.(*GetFirewallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_UpdateFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirewallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).UpdateFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallService/UpdateFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).UpdateFirewall(ctx, req.(*UpdateFirewallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_DeleteFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirewallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).DeleteFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallService/DeleteFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).DeleteFirewall(ctx, req.(*DeleteFirewallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_OperateFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateFirewallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).OperateFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.FirewallService/OperateFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).OperateFirewall(ctx, req.(*OperateFirewallReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirewallService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "firewall.FirewallService",
	HandlerType: (*FirewallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFirewall",
			Handler:    _FirewallService_CreateFirewall_Handler,
		},
		{
			MethodName: "GetFirewall",
			Handler:    _FirewallService_GetFirewall_Handler,
		},
		{
			MethodName: "UpdateFirewall",
			Handler:    _FirewallService_UpdateFirewall_Handler,
		},
		{
			MethodName: "DeleteFirewall",
			Handler:    _FirewallService_DeleteFirewall_Handler,
		},
		{
			MethodName: "OperateFirewall",
			Handler:    _FirewallService_OperateFirewall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firewall.proto",
}
